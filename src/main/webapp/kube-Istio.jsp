<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="kubernetes Service Mesh With istio,Install istio cli, istio deploy app, istio routing, istio monitor grafana ">
    <meta name="keywords" content="istio tutorial, kubernetes istio, istio, installation, istio configuration , kubernetes tutorial, kubernetes by examples">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>Service Mesh With Istio</title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/kube-Istio.jsp"
  },
  "name" : "Service Mesh With Istio",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "Service Mesh With Istio",
  "image":"https://8gwifi.org/docs/img/arch.svg",
  "datePublished" : "2019-04-09",
  "dateModified": "2019-04-09",
  "articleSection" : "Service Mesh With Istio",
  "articleBody" : [ "Istio Introduction" ,"Download and Install ISTIO CLI", "ISTIO DEPLOY SAMPLE APPS" , "Configuring Request Routing", "Route based on user identity", "Route based on Traffic" , "Istio Monitor And Visualize"],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Service Mesh With Istio</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Tuesday April 9, 2019</p>
          </p>
          
          <img class="img-fluid rounded" src="img/arch.svg" height="400" width="500" alt="Referefce ">
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>

<h3 class="mt-4">Introduction </h3>

<p>This sample chapter extracted from the book,<mark> <a href="https://leanpub.com/crypto">Kubernetes for DevOps </a>. </mark> </p>
<p><mark>Get this book on Just  <a href="https://leanpub.com/kube/" target="_blank" rel="noopener">  $9 </a> or Ask Author for Discount </mark>   </p>
<p><iframe class="embed-responsive-item" width='160' height='400' src='https://leanpub.com/kube/embed' frameborder='0' allowtransparency='true'></iframe></p>

<hr>

<p>Istio is an open source independent service mesh that provides the fundamentals you need to successfully run a distributed microservice architecture.</p>
<p>A service mesh is a dedicated infrastructure layer for handling <strong>service-to-service communication</strong>. It's responsible for the reliable delivery of requests through the complex topology of services that comprise a modern, cloud native application.</p>
<p>An Istio service mesh is logically split into a  <strong>data plane</strong>  and a  <strong>control plane</strong>.</p>
<ul>
<li>
<p>The  <strong>data plane</strong>  is composed of a set of intelligent proxies (<a href="https://www.envoyproxy.io/">Envoy</a>) deployed as sidecars. These proxies mediate and control all network communication between microservices along with  <a href="https://istio.io/docs/concepts/policies-and-telemetry/">Mixer</a>, a general-purpose policy and telemetry hub.</p>
</li>
<li>
<p>The  <strong>control plane</strong>  manages and configures the proxies to route traffic. Additionally, the control plane configures Mixers to enforce policies and collect telemetry.</p>
</li>
</ul>
<p>Let's review in more detail what each of the components that make up this service mesh are.</p>
<ul>
<li>
<p><strong>Envoy</strong></p>
<ul>
<li>Processes the inbound/outbound traffic from inter-service and service-to-external-service transparently.</li>
</ul>
</li>
<li>
<p><strong>Pilot</strong></p>
<ul>
<li>Pilot provides service discovery for the Envoy sidecars, traffic management capabilities for intelligent routing (e.g., A/B tests, canary deployments, etc.), and resiliency (timeouts, retries, circuit breakers, etc.)</li>
</ul>
</li>
<li>
<p><strong>Mixer</strong></p>
<ul>
<li>Mixer enforces access control and usage policies across the service mesh, and collects telemetry data from the Envoy proxy and other services.</li>
</ul>
</li>
<li>
<p><strong>Citadel</strong></p>
<ul>
<li>Citadel provides strong service-to-service and end-user authentication with built-in identity and credential management.</li>
</ul>
</li>
</ul>
<%@ include file="footer_adsense.jsp"%>
<h3><a id="Download_and_Install_ISTIO_CLI_30"></a>Download and Install ISTIO CLI</h3>
<p>Before we can get started configuring Istio we'll need to first install the command line tools that you will interact with. To do this run the following</p>
<pre><code class="language-console">curl -L https://git.io/getLatestIstio | sh -  
// version can be different as istio gets upgraded 
cd istio-* 
sudo mv -v bin/istioctl /usr/local/bin/
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">root@kube-master:~# curl -L https://git.io/getLatestIstio | sh - 
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  1631  100  1631    0     0   1849      0 --:--:-- --:--:-- --:--:--  1849
Downloading istio-1.1.2 from https://github.com/istio/istio/releases/download/1.1.2/istio-1.1.2-linux.tar.gz ...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   614    0   614    0     0   1485      0 --:--:-- --:--:-- --:--:--  1483
100 15.0M  100 15.0M    0     0  8379k      0  0:00:01  0:00:01 --:--:-- 21.5M
Downloaded into istio-1.1.2:
bin  install  istio-telemetry.yaml  istio.VERSION  LICENSE  README.md  samples  tools
Add /root/istio-1.1.2/bin to your path; e.g copy paste in your shell and/or ~/.profile:
export PATH=&quot;$PATH:/root/istio-1.1.2/bin&quot;
root@kube-master:~# cd istio-* 
root@kube-master:~/istio-1.1.2# sudo mv -v bin/istioctl /usr/local/bin/
'bin/istioctl' -&gt; '/usr/local/bin/istioctl'
</code></pre>
<h3><a id="INSTALL_ISTIO_64"></a>INSTALL ISTIO</h3>
<h4><a id="Define_service_account_for_Tiller_66"></a>Define service account for Tiller</h4>
<ul>
<li>First create a service account for Tiller:</li>
</ul>
<pre><code class="language-console">kubectl apply -f install/kubernetes/helm/helm-service-account.yaml
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">serviceaccount/tiller unchanged
clusterrolebinding.rbac.authorization.k8s.io/tiller unchanged
</code></pre>
<ul>
<li>Install Istio CRDs</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# helm install install/kubernetes/helm/istio-init --name istio-init --namespace istio-system
</code></pre>
<ul>
<li>check the Installation</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl get crds | grep 'istio.io'
adapters.config.istio.io               2019-04-08T12:39:02Z
apikeys.config.istio.io                2019-04-08T12:39:02Z
attributemanifests.config.istio.io     2019-04-08T12:39:01Z
authorizations.config.istio.io         2019-04-08T12:39:02Z
bypasses.config.istio.io               2019-04-08T12:39:02Z
checknothings.config.istio.io          2019-04-08T12:39:02Z
circonuses.config.istio.io             2019-04-08T12:39:02Z
cloudwatches.config.istio.io           2019-04-08T12:39:00Z
clusterrbacconfigs.rbac.istio.io       2019-04-08T12:39:01Z
deniers.config.istio.io                2019-04-08T12:39:02Z
destinationrules.networking.istio.io   2019-04-08T12:39:01Z
dogstatsds.config.istio.io             2019-04-08T12:39:00Z
edges.config.istio.io                  2019-04-08T12:39:02Z
envoyfilters.networking.istio.io       2019-04-08T12:39:01Z
fluentds.config.istio.io               2019-04-08T12:39:02Z
gateways.networking.istio.io           2019-04-08T12:39:01Z
.....
....
</code></pre>
<ul>
<li>Finally installs Istio's core components:</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# helm install install/kubernetes/helm/istio --name istio --namespace istio-system --set global.configValidation=false --set sidecarInjectorWebhook.enabled=false --set grafana.enabled=true --set servicegraph.enabled=true
</code></pre>
<ul>
<li>Verify the services</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl get svc -n istio-system
NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)                                                                                                                                      AGE
grafana                ClusterIP      10.96.171.173    &lt;none&gt;           3000/TCP                                                                                                                                     2m40s
istio-citadel          ClusterIP      10.96.65.75      &lt;none&gt;           8060/TCP,15014/TCP                                                                                                                           2m40s
istio-galley           ClusterIP      10.106.97.125    &lt;none&gt;           443/TCP,15014/TCP,9901/TCP                                                                                                                   2m40s
istio-ingressgateway   LoadBalancer   10.102.204.117   172.20.240.112   80:31380/TCP,443:31390/TCP,31400:31400/TCP,15029:30709/TCP,15030:30672/TCP,15031:31789/TCP,15032:32654/TCP,15443:30390/TCP,15020:31778/TCP   2m40s
istio-pilot            ClusterIP      10.109.0.98      &lt;none&gt;           15010/TCP,15011/TCP,8080/TCP,15014/TCP                                                                                                       2m40s
istio-policy           ClusterIP      10.106.140.39    &lt;none&gt;           9091/TCP,15004/TCP,15014/TCP                                                                                                                 2m40s
istio-telemetry        ClusterIP      10.98.74.109     &lt;none&gt;           9091/TCP,15004/TCP,15014/TCP,42422/TCP                                                                                                       2m40s
prometheus             ClusterIP      10.98.183.129    &lt;none&gt;           9090/TCP                                                                                                                                     2m40s
servicegraph           ClusterIP      10.100.212.98    &lt;none&gt;           8088/TCP                                                                                                      
</code></pre>
<ul>
<li>Verify the pods are in running state.</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl get pods -n istio-system
NAME                                    READY   STATUS      RESTARTS   AGE
grafana-57586c685b-5nsb9                1/1     Running     0          3m25s
istio-citadel-7579f8fbb9-frnqz          1/1     Running     0          3m25s
istio-galley-79d4c5d9f7-llpvk           1/1     Running     0          3m25s
istio-ingressgateway-5fbcf4488f-vzt98   1/1     Running     0          3m25s
istio-init-crd-10-cwn8j                 0/1     Completed   0          6m28s
istio-init-crd-11-k4lx4                 0/1     Completed   0          6m28s
istio-pilot-df78f86cb-sfzjt             2/2     Running     0          3m25s
istio-policy-5f4747447c-rvt72           2/2     Running     2          3m25s
istio-telemetry-84697c64d7-btbbm        2/2     Running     2          3m25s
prometheus-66c9f5694-lp2wq              1/1     Running     0          3m25s
servicegraph-57d6f5b58c-4m92m           1/1     Running     1          3m24s
</code></pre>
<%@ include file="footer_adsense.jsp"%>
<h3><a id="DEPLOY_SAMPLE_APPS_150"></a>DEPLOY SAMPLE APPS</h3>
<p>Now that we have all the resources installed for Istio, we will use sample application called BookInfo to review key capabilities of the service mesh such as intelligent routing, and review telemetry data using Prometheus &amp; Grafana.</p>
<p><img src="img/bookinfo.svg" alt="enter image description here"></p>
<p>The Bookinfo application is broken into four separate microservices:</p>
<ul>
<li><code>productpage</code>. The  <code>productpage</code>  microservice calls the  <code>details</code>  and  <code>reviews</code>  microservices to populate the page.</li>
<li><code>details</code>. The  <code>details</code>  microservice contains book information.</li>
<li><code>reviews</code>. The  <code>reviews</code>  microservice contains book reviews. It also calls the  <code>ratings</code>  microservice.</li>
<li><code>ratings</code>. The  <code>ratings</code>  microservice contains book ranking information that accompanies a book review.</li>
</ul>
<p>There are 3 versions of the  <code>reviews</code>  microservice:</p>
<ul>
<li>Version v1 doesn't call the  <code>ratings</code>  service.</li>
<li>Version v2 calls the  <code>ratings</code>  service, and displays each rating as 1 to 5 black stars.</li>
<li>Version v3 calls the  <code>ratings</code>  service, and displays each rating as 1 to 5 red stars.</li>
</ul>
<h4><a id="Deploy_Sample_Apps_169"></a>Deploy Sample Apps</h4>
<ul>
<li>Deploy sample apps by manually injecting istio proxy and confirm pods, services are running correctly</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)
</code></pre>
<p>The output</p>
<pre><code class="language-console">service/details created
deployment.extensions/details-v1 created
service/ratings created
deployment.extensions/ratings-v1 created
service/reviews created
deployment.extensions/reviews-v1 created
deployment.extensions/reviews-v2 created
deployment.extensions/reviews-v3 created
service/productpage created
deployment.extensions/productpage-v1 created
</code></pre>
<ul>
<li>Verify the book info pod and svc are Running.</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl get pod,svc
NAME                                  READY   STATUS    RESTARTS   AGE
pod/details-v1-54c6f46b4b-q5b45       2/2     Running   0          58s
pod/my-nginx-6cc48cd8db-n6scm         1/1     Running   4          27d
pod/productpage-v1-5c4f6df4dd-7lcws   2/2     Running   0          58s
pod/ratings-v1-6ccbd9c4f4-2cjbd       2/2     Running   0          58s
pod/reviews-v1-bfc99c79-jhqr6         2/2     Running   0          58s
pod/reviews-v2-6ffb5f6b44-zf9tt       2/2     Running   0          58s
pod/reviews-v3-7c67bd445-bc5ms        2/2     Running   0          58s

NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
service/details       ClusterIP   10.99.96.161    &lt;none&gt;        9080/TCP   58s
service/kubernetes    ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP    27d
service/productpage   ClusterIP   10.106.134.93   &lt;none&gt;        9080/TCP   58s
service/ratings       ClusterIP   10.106.213.22   &lt;none&gt;        9080/TCP   58s
service/reviews       ClusterIP   10.100.60.83    &lt;none&gt;        9080/TCP   58s
</code></pre>
<ul>
<li>Define the virtual service and ingress gateway</li>
</ul>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
</code></pre>
<p>The output</p>
<pre><code class="language-console">gateway.networking.istio.io/bookinfo-gateway created
virtualservice.networking.istio.io/bookinfo created
</code></pre>
<h4><a id="Testing_222"></a>Testing</h4>
<p>To test, do the following:</p>
<ol>
<li>Open a new browser tab</li>
<li>Paste the DNS endpoint returned from the previous  <code>get service istiogateway</code>  command</li>
<li>Add /productpage to the end of that DNS endpoint</li>
<li>Hit enter to retrieve the page.</li>
<li>Click reload multiple times to see how the layout and content of the reviews changes as differnt versions (v1, v2, v3) of the app are called.</li>
</ol>
<p><img src="img/productpage.png" alt="enter image description here"></p>
<h3><a id="Configuring_Request_Routing_235"></a>Configuring Request Routing</h3>
<p>Service versions (a.k.a. <strong>subsets</strong>) - In a continuous deployment scenario,  a give service can have different subsets and can run different versions of the same application.  Common scenarios where this occurs <strong>include A/B testing, canary rollouts, etc</strong>. The choice of a particular version can be decided based on various criterion (headers, url, etc.) and/or by weights assigned to each version. Each service has a default version consisting of all its instance.</p>
<p>To Demonstrate this behavior</p>
<p>Apply Destination rule</p>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">destinationrule.networking.istio.io/productpage created
destinationrule.networking.istio.io/reviews created
destinationrule.networking.istio.io/ratings created
destinationrule.networking.istio.io/details created
</code></pre>
<p>View Destination rule for bookinfo</p>
<pre><code class="language-console">kubectl get destinationrules -o yaml
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">...
...
spec:
    host: details
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2

spec:
    host: productpage
    subsets:
    - labels:
        version: v1
      name: v1

spec:
    host: ratings
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
    - labels:
        version: v2-mysql
      name: v2-mysql
    - labels:
        version: v2-mysql-vm
      name: v2-mysql-vm

spec:
    host: reviews
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
    - labels:
        version: v3
      name: v3
</code></pre>
<p>To route to one version only, you apply virtual services that set the default version for the microservices. In this case, the virtual services will route all traffic to <strong>reviews:v1</strong> of microservice.</p>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">virtualservice.networking.istio.io/productpage created
virtualservice.networking.istio.io/reviews created
virtualservice.networking.istio.io/ratings created
virtualservice.networking.istio.io/details created
</code></pre>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl get virtualservices reviews -o yaml
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">.......
.......
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v1
</code></pre>
<p>Try now to reload the page multiple times, and note how only version 1 of reviews is displayed each time.</p>
<p><img src="img/route.png" alt="Review in subset v1"></p>
<h3><a id="Route_based_on_user_identity_349"></a>Route based on user identity</h3>
<p><strong>User specific routing</strong>. In this case, all traffic from a user named <em>Jason</em> will be routed to the service <strong>reviews:v2</strong>.</p>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">virtualservice.networking.istio.io/reviews configured
</code></pre>
<p>If the user header matches to <strong>jason</strong>  will be routed to the service <strong>reviews:v2</strong>.</p>
<pre><code class="language-console">kubectl get virtualservices reviews -o yaml
...........
...........
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1
</code></pre>
<p>Try now by logging with user jason password blank</p>
<p><img src="img/jason.png" alt="review v2"></p>
<h3><a id="Route_based_on_Traffic_390"></a>Route based on Traffic</h3>
<p>Next, we'll demonstrate how to gradually migrate traffic from one version of a microservice to another. In our example, we'll send  50% of traffic to reviews:v1 and  50% to reviews:v3.</p>
<pre><code class="language-console">kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml 
kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml 
kubectl get virtualservice reviews -o yaml
</code></pre>
<p>The subset is set to 50% of traffic to v1 and 50% of traffic to v3 for all reviews request.</p>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl get virtualservice reviews -o yaml
.............
.............
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v1
      weight: 50
    - destination:
        host: reviews
        subset: v3
      weight: 50
</code></pre>
<p>To test it, refresh your browser over and over, and you'll see only reviews:v1 and reviews:v3.</p>
<p><img src="img/traffic.png" alt="Traffic Based routing"></p>
<%@ include file="footer_adsense.jsp"%>
<h3><a id="IIstio_Monitor_And_Visualize_426"></a>IIstio Monitor And Visualize</h3>
<p>First collect new telemetry data and download a YAML file to hold configuration for the new metric and log stream that Istio will generate and collect automatically.</p>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# curl -LO https://eksworkshop.com/servicemesh/deploy.files/istio-telemetry.yaml
root@kube-master:~/istio-1.1.2# kubectl apply -f istio-telemetry.yaml
</code></pre>
<p><strong>The output</strong></p>
<pre><code class="language-console">
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  2254  100  2254    0     0   3994      0 --:--:-- --:--:-- --:--:--  3996

metric.config.istio.io/doublerequestcount created
prometheus.config.istio.io/doublehandler created
rule.config.istio.io/doubleprom created
logentry.config.istio.io/newlog created
stdio.config.istio.io/newhandler created
rule.config.istio.io/newlogstdio created
</code></pre>
<p>Ensure prometheus and grafana services are present</p>
<pre><code class="language-console">root@kube-master:~/istio-1.1.2# kubectl -n istio-system get svc prometheus
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
prometheus   ClusterIP   10.98.183.129   &lt;none&gt;        9090/TCP   75m

root@kube-master:~/istio-1.1.2# kubectl -n istio-system get svc grafana
NAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
grafana   ClusterIP   10.96.171.173   &lt;none&gt;        3000/TCP   75m
</code></pre>
<p>Setup the port forwading for grafana</p>
<pre><code class="language-console">kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') 8080:3000
</code></pre>
<p><strong>The Output</strong></p>
<pre><code class="language-console">items[0].metadata.name}') 8080:3000
Forwarding from 127.0.0.1:8080 -&gt; 3000
</code></pre>
<p><strong>Open the Grafana UI</strong></p>
<p><img src="img/grafana.png" alt="Istio Dashboard via the Grafana UI"></p>
<p>Open a new terminal and send a traffic to the mesh</p>
<pre><code class="language-console">root@kube-master:~# while true; do curl -o /dev/null -s &quot;172.20.240.112/productpage&quot;; done
</code></pre>
<p><img src="img/grafana1.png" alt="Traffic evenly spread"></p>
<h3><a id="Cleanup_488"></a>Cleanup</h3>
<p>To cleanup</p>
<ul>
<li>Remove telemetry configuration</li>
<li>Remove the application virtual services / destination rules</li>
<li>Remove the gateway</li>
<li>Remove Istio</li>
</ul>
<pre><code class="language-console">kubectl delete -f istio-telemetry.yaml
kubectl delete -f samples/bookinfo/networking/virtual-service-all-v1.yaml
kubectl delete -f samples/bookinfo/networking/destination-rule-all.yaml
kubectl delete -f samples/bookinfo/networking/bookinfo-gateway.yaml
kubectl delete -f samples/bookinfo/platform/kube/bookinfo.yaml
helm delete --purge istio
helm delete --purge istio-init
</code></pre>

<h3><a id="Further_References_507"></a>Further References</h3>
<p><a href="https://istio.io/docs/">https://istio.io/docs/</a></p>
          
<hr>
<p><h2>Video Demo </h2> </p>
 <iframe width="420" height="315"
src="https://youtube.com/embed/uzb4fjOBMEY">
</iframe> 




<%@ include file="thanks.jsp"%>


<hr>


      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 

          
          <%@ include file="related-kube.jsp"%>
          
          <!-- Article Widget -->
         <%@ include file="related-linux.jsp"%>
         
           <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         
         <%@ include file="related-openstack.jsp"%>
         
         <%@ include file="related-cryptography.jsp"%>
         <%@ include file="related-window-crypto.jsp"%>
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>

      </div>
      <!-- /.row -->


	<%@ include file="addcomments.jsp"%>
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>