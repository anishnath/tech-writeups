<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="go lang des,3des encryption decryption, go lang tutorial, go lang cryptography ">
    <meta name="keywords" content="go lang crypto/des, go lang security, go lang cryptography, des,3des,NewTripleDESCipher,NewCipher,crypto/des ">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>go lang 3des encryption decryption</title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/go-3des.jsp"
  },
  "name" : "go lang des,3des encryption decryption",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "go lang des,3des encryption decryption ",
  "image":"https://8gwifi.org/docs/img/go.png",
  "datePublished" : "2019-04-03",
  "dateModified": "2019-04-03",
  "articleSection" : "go lang 3des encryption decryption",
  "articleBody" : [ "Go lang 3DES encryption/Decryption", "DES" , "3des", "NewCipher" , "NewTripleDESCipher" , "EncryptTripleDES" , "URL-compatible base64", "DecryptTripleDES" , "crypto/des"],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Go lang 3DES encryption/Decryption</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Wednesday April 3 , 2019</p>
          </p>
          
          
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
           <p><mark>This sample chapter </mark> extracted from the book, <a href="https://leanpub.com/cryptog">Go Lang Cryptography for Developers </a>. The Book theme is<mark>Cryptography is for EveryOne. Learn from Crypto Principle to Applied Cryptography With Practical Example</mark> </p>
		   <p><iframe class="embed-responsive-item" width='160' height='400' src='https://leanpub.com/cryptog/embed' frameborder='0' allowtransparency='true'></iframe></p>
           
          <hr>
<p><strong>DES</strong> is the old "Data Encryption Standard" from the seventies. Its key size is too short for proper security (56 effective bits; this can be brute-forced, as has been demonstrated  <a href="http://en.wikipedia.org/wiki/EFF_DES_cracker">more than ten years ago</a>). Also, DES uses 64-bit blocks, which raises some potential issues when encrypting several gigabytes of data with the same key (a gigabyte is not that big nowadays).</p>
<p><strong>3DES</strong> is a trick to reuse DES implementations, by cascading three instances of DES (with distinct keys). 3DES is believed to be secure up to at least &quot;<strong>2112</strong>&quot; security (which is quite a lot, and quite far in the realm of "not breakable with today's technology").</p>
<p>Go lang <strong>builtin</strong> Package <a href="https://godoc.org/crypto/des">des</a>  implements the Data Encryption Standard (DES) and the Triple Data Encryption Algorithm (TDEA) as defined in U.S. Federal Information Processing Standards Publication 46-3.</p>
<p><strong>fun</strong> <code>NewCipher</code>  creates and returns a new cipher.Block.</p>

<pre><code class="html"><span class="hljs-keyword">func</span> NewCipher(key []<span class="hljs-typename">byte</span>) (cipher.Block, error)
</code></pre>
<p><strong>fun</strong> <code>NewTripleDESCipher</code> creates and returns a new cipher.Block.</p>

<pre><code class="html"><span class="hljs-keyword">func</span> NewTripleDESCipher(key []<span class="hljs-typename">byte</span>) (cipher.Block, error)
</code></pre>
<p>The following example will show how to perform <strong>3DES</strong> encryption and decryption of the given plain text message</p>
<ul>
<li>The Input key length should be 24</li>
</ul>

<pre><code class="html"><span class="hljs-keyword">package</span> main  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">"crypto/des"</span>  
   <span class="hljs-string">"encoding/hex"</span> 
   <span class="hljs-string">"fmt"</span>
   )  
  
<span class="hljs-keyword">func</span> main() {  
  
   <span class="hljs-comment">// Mimimum Key Size of Length 24  </span>
  key := <span class="hljs-string">"mysecretPasswordkeySiz24"</span>  
  plainText := <span class="hljs-string">"https://8gwifi.org"</span>  
  ct := EncryptTripleDES([]<span class="hljs-typename">byte</span>(key), plainText)  
   fmt.Printf(<span class="hljs-string">"Original Text:  %s\n"</span>, plainText)  
   fmt.Printf(<span class="hljs-string">"3DES Encrypted Text:  %s\n"</span>, ct)  
   DecryptTripleDES([]<span class="hljs-typename">byte</span>(key), ct)  
  
}  
  
<span class="hljs-keyword">func</span> EncryptTripleDES(key []<span class="hljs-typename">byte</span>, plaintext <span class="hljs-typename">string</span>) <span class="hljs-typename">string</span> {  
   c, err := des.NewTripleDESCipher(key)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {  
      fmt.Errorf(<span class="hljs-string">"NewTripleDESCipher(%d bytes) = %s"</span>, <span class="hljs-built_in">len</span>(key), err)  
      <span class="hljs-built_in">panic</span>(err)  
   }  
  
   out := <span class="hljs-built_in">make</span>([]<span class="hljs-typename">byte</span>, <span class="hljs-built_in">len</span>(plaintext))  
   c.Encrypt(out, []<span class="hljs-typename">byte</span>(plaintext))  
   <span class="hljs-keyword">return</span> hex.EncodeToString(out)  
  
}  
  
<span class="hljs-keyword">func</span> DecryptTripleDES(key []<span class="hljs-typename">byte</span>, ct <span class="hljs-typename">string</span>) {  
  
   ciphertext, _ := hex.DecodeString(ct)  
   c, err := des.NewTripleDESCipher([]<span class="hljs-typename">byte</span>(key))  
   <span class="hljs-keyword">if</span> err != <span class="hljs-constant">nil</span> {  
      fmt.Errorf(<span class="hljs-string">"NewTripleDESCipher(%d bytes) = %s"</span>, <span class="hljs-built_in">len</span>(key), err)  
      <span class="hljs-built_in">panic</span>(err)  
   }  
   plain := <span class="hljs-built_in">make</span>([]<span class="hljs-typename">byte</span>, <span class="hljs-built_in">len</span>(ciphertext))  
   c.Decrypt(plain, ciphertext)  
   s := <span class="hljs-typename">string</span>(plain[:])  
   fmt.Printf(<span class="hljs-string">"3DES Decrypyed Text:  %s\n"</span>, s)  
}
</code></pre>

<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="addcomments.jsp"%>
      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 
         
         
         <%@ include file="related-go.jsp"%>
         
         <%@ include file="related-cryptography.jsp"%>
         
         <%@ include file="related-window-crypto.jsp"%>

		 
          <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         <%@ include file="related-kube.jsp"%>
         
         
         <%@ include file="related-openstack.jsp"%>
         <%@ include file="related-linux.jsp"%>
         
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>


      </div>
      
      <!-- /.row -->

    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>