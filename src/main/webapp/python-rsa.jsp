<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="python rsa, python generate rsa keys, python rsa encryption decryption, python GenerateMultiPrimeKey, python RSA OAEP, python RSA_PKCS1-V1_5 Sign Verify, python RSA_PSS Sign/Verify, python Export RSA Key to PEM Format, export, import PEM Key to RSA Format ">
    <meta name="keywords" content="python rsa, python generate rsa keys, python rsa encryption decryption, python GenerateMultiPrimeKey, python RSA OAEP, python RSA_PKCS1-V1_5 Sign Verify, python RSA_PSS Sign/Verify, python Export RSA Key to PEM Format, export, import PEM Key to RSA Format, python tutorial python security tutorial , pycrypto, hazmat libraray">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>python rsa, python generate rsa keys, python rsa encryption decryption, python GenerateMultiPrimeKey, python RSA OAEP, python RSA_PKCS1-V1_5 Sign Verify, python RSA_PSS Sign/Verify, python Export RSA Key to PEM Format, export, import PEM Key to RSA Format </title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/python-rsa.jsp"
  },
  "name" : "python rsa, python generate rsa keys, python rsa encryption decryption, python GenerateMultiPrimeKey, python RSA OAEP, python RSA_PKCS1-V1_5 Sign Verify, python RSA_PSS Sign/Verify",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "python rsa, python generate rsa keys, python rsa encryption decryption, python GenerateMultiPrimeKey, python RSA OAEP, python RSA_PKCS1-V1_5 Sign Verify, python RSA_PSS Sign/Verify",
  "image":"https://8gwifi.org/docs/img/python-rsa.png",
  "datePublished" : "2018-11-15",
  "dateModified": "2018-11-15",
  "articleSection" : "python RSA Cryptography ",
  "articleBody" : [ "pyca Generate RSA Keys", "pyca RSA-OAEP encryption/ decryption" , "pyca RSA Sign Verify", "pycrypto Generate RSA Keys" , "pycrypto Generate Encrypted RSA PEM Keys" , "pycrypto RSA Keys in PKCS8 format" , "pycrypto Generate RSA key and export in DER Format", "pycrypto Generate RSA Keys and Perform Encryption and Decryption" , "pycrypto Load RSA Keys and Perform Encryption and Decryption", "pycrypto PKCS1_OAEP" , "pycrypto PKCS1_PSS Sign Verify", "pycrypto PKCS1_v1_5 Encrypt/Decrypt" ],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">python RSA Cryptography</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Thursday November 15 , 2018</p>
          </p>
          
          
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>
          
          <h2 class="mt-4" id="beforeyoubegin">Before you Begin</h2>

<p><mark>This sample chapter </mark> extracted from the book, <a href="https://leanpub.com/cryptop">Python Cryptograhy</a>. </mark> </p>
<p><iframe class="embed-responsive-item" width='160' height='400' src='https://leanpub.com/cryptop/embed' frameborder='0' allowtransparency='true'></iframe></p>

<hr>

          
          <h1><a id="RSA_0"></a>RSA</h1>
		  <p>RSA stands for Ron Rivest, Adi Shamir, and Leonard Adleman, who first publicly described the algorithm in 1978. A user of RSA creates and publishes the product of two large prime numbers, along with an auxiliary value, as their public key. The private KEY (prime factors) MUST BE KEPT SECRET. Anyone can use the public key to encrypt a message, but with currently published methods, if the public key enough it is virtually impossible to decode the message.</p>
<p>In this artricle we will cover two important python library and perform various RSA functions.</p>
<ul>
<li>PYCA/Cryptography</li>
<li>pycrypto</li>
</ul>
<hr>
<h2 class="mt-4" ><a id="pyca_Generate_RSA_Keys_9"></a>pyca Generate RSA Keys</h2>
<p>Generate RSA private/public Key and save in PEM format</p>
<pre><code class="language-python"><span class="hljs-keyword">from</span> cryptography.hazmat.backends <span class="hljs-keyword">import</span> default_backend  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="hljs-keyword">import</span> rsa  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives <span class="hljs-keyword">import</span> serialization  
  
encryptedpass = <span class="hljs-string">"myverystrongpassword"</span>  
  
<span class="hljs-comment"># Generate an RSA Keys  </span>
private_key = rsa.generate_private_key(  
        public_exponent=<span class="hljs-number">65537</span>,  
        key_size=<span class="hljs-number">2048</span>,  
        backend=default_backend()  
    )  
  
public_key = private_key.public_key()  
  
<span class="hljs-comment"># Save the RSA key in PEM format  </span>
<span class="hljs-keyword">with</span> open(<span class="hljs-string">"/tmp/rsakey.pem"</span>, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:  
    f.write(private_key.private_bytes(  
        encoding=serialization.Encoding.PEM,  
        format=serialization.PrivateFormat.TraditionalOpenSSL,  
        encryption_algorithm=serialization.BestAvailableEncryption(encryptedpass),  
    )  
    )  
  
<span class="hljs-comment"># Save the Public key in PEM format  </span>
<span class="hljs-keyword">with</span> open(<span class="hljs-string">"/tmp/rsapub.pem"</span>, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:  
    f.write(public_key.public_bytes(  
        encoding=serialization.Encoding.PEM,  
        format=serialization.PublicFormat.SubjectPublicKeyInfo,  
    )  
)
</code></pre>
<hr>
<h2 class="mt-4" ><a id="pyca_RSAOAEP_encryption_decryption_example_47"></a>pyca RSA-OAEP encryption/ decryption example</h2>
<p>Optimal Asymmetric Encryption Padding is a padding scheme often used together with RSA encryption, standardized in PKCS#1 v2</p>
<pre><code class="language-python"><span class="hljs-keyword">from</span> cryptography.hazmat.backends <span class="hljs-keyword">import</span> default_backend  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="hljs-keyword">import</span> padding  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives <span class="hljs-keyword">import</span> hashes  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives.serialization <span class="hljs-keyword">import</span> load_pem_private_key  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives.serialization <span class="hljs-keyword">import</span> load_pem_public_key  
  
encryptedpass = <span class="hljs-string">"myverystrongpassword"</span>  
plaintextMessage = <span class="hljs-string">"Hello 8gwifi.org"</span>  
alicePubKey = load_pem_public_key(open(<span class="hljs-string">'/tmp/alicepub.pem'</span>, <span class="hljs-string">'rb'</span>).read(),default_backend())  
ciphertext = alicePubKey.encrypt(  
    plaintextMessage,  
    padding.OAEP(  
            mgf=padding.MGF1(algorithm=hashes.SHA256()),  
            algorithm=hashes.SHA256(),  
            label=<span class="hljs-keyword">None</span>  
  )  
)  
alicePrivKey = load_pem_private_key(open(<span class="hljs-string">'/tmp/alice.pem'</span>, <span class="hljs-string">'rb'</span>).read(),encryptedpass,default_backend())  
  
d = alicePrivKey.decrypt(  
    ciphertext,  
    padding.OAEP(  
            mgf=padding.MGF1(algorithm=hashes.SHA256()),  
            algorithm=hashes.SHA256(),  
            label=<span class="hljs-keyword">None</span>  
  )  
)  
  
<span class="hljs-keyword">assert</span> plaintextMessage, d 
</code></pre>
<hr>
<%@ include file="footer_adsense.jsp"%> 
<h2 class="mt-4" ><a id="pyca_RSA_Sign_Verify_Example_83"></a>pyca RSA Sign Verify Example</h2>
<p>Valid paddings for signatures are <a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/#cryptography.hazmat.primitives.asymmetric.padding.PSS" title="cryptography.hazmat.primitives.asymmetric.padding.PSS"><code>PSS</code></a> and <a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/#cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15" title="cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15"><code>PKCS1v15</code></a>. <code>PSS</code> is the recommended choice for any new protocols or applications, <code>PKCS1v15</code> should only be used to support legacy protocols.</p>
<p><strong>Probabilistic Signature Scheme</strong> (<strong>PSS</strong>) is a <a href="https://en.wikipedia.org/wiki/Cryptography" title="Cryptography">cryptographic</a>  <a href="https://en.wikipedia.org/wiki/Digital_signature" title="Digital signature">signature scheme</a> designed by <a href="https://en.wikipedia.org/wiki/Mihir_Bellare" title="Mihir Bellare">Mihir Bellare</a> and <a href="https://en.wikipedia.org/wiki/Phillip_Rogaway" title="Phillip Rogaway">Phillip Rogaway</a></p>
<pre><code class="language-python"><span class="hljs-keyword">from</span> cryptography.hazmat.backends <span class="hljs-keyword">import</span> default_backend  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="hljs-keyword">import</span> padding  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives <span class="hljs-keyword">import</span> hashes  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives.serialization <span class="hljs-keyword">import</span> load_pem_private_key  
<span class="hljs-keyword">from</span> cryptography.hazmat.primitives.serialization <span class="hljs-keyword">import</span> load_pem_public_key  
  
encryptedpass = <span class="hljs-string">"myverystrongpassword"</span>  
plaintextMessage = <span class="hljs-string">"Hello 8gwifi.org"</span>  
  
alicePrivKey = load_pem_private_key(open(<span class="hljs-string">'/tmp/alice.pem'</span>, <span class="hljs-string">'rb'</span>).read(),encryptedpass,default_backend())  
  
sig = alicePrivKey.sign(  
    plaintextMessage,  
    padding.PSS(  
        mgf=padding.MGF1(algorithm=hashes.SHA256()),  
        salt_length=padding.PSS.MAX_LENGTH,  
    ),  
    hashes.SHA256()  
)  
alicePubKey = load_pem_public_key(open(<span class="hljs-string">'/tmp/alicepub.pem'</span>, <span class="hljs-string">'rb'</span>).read(),default_backend())  
ciphertext = alicePubKey.verify(  
    sig,  
    plaintextMessage,  
    padding.PSS(  
            mgf=padding.MGF1(algorithm=hashes.SHA256()),  
            salt_length=padding.PSS.MAX_LENGTH,  
    ),  
    hashes.SHA256()  
) 
</code></pre>
<hr>
<h2 class="mt-4" ><a id="pycrypto_122"></a>pycrypto</h2>
<p>pycrypto  example of generating RSA keys in various format (PEM/DER)</p>
<ul>
<li><strong>RSA key size</strong> : 1024,2048,4096</li>
</ul>
<%@ include file="footer_adsense.jsp"%>
<hr>
<h3 class="mt-4" ><a id="pycrypto_Generate__RSA__Keys_and_store_in_PEM_format_128"></a>pycrypto Generate  RSA  Keys and store in PEM format</h3>
<pre><code class="language-python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA  
<span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> asn1  
<span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode  
  
<span class="hljs-comment">#Export RSA public/private KEY in PEM format  </span>
key = RSA.generate(<span class="hljs-number">2048</span>)  
privKey = key.exportKey(<span class="hljs-string">'PEM'</span>)  
pubKey =  key.publickey().exportKey(<span class="hljs-string">'PEM'</span>)  
  
<span class="hljs-comment">#save PEM key into the file  </span>
<span class="hljs-keyword">with</span> open(<span class="hljs-string">'/tmp/rsakey.pem'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> file:  
    file.write(privKey)  
  
<span class="hljs-keyword">with</span> open(<span class="hljs-string">'/tmp/rsapub.pem'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> file:  
    file.write(pubKey)  
</code></pre>

<hr>
<h3 class="mt-4" ><a id="pycrypto_Generate_Encrypted_RSA_PEM_Keys_148"></a>pycrypto Generate Encrypted RSA PEM Keys</h3>
<pre><code class="language-python">encryptedpass = <span class="hljs-string">"myverystrongpassword"</span>  
key = RSA.generate(<span class="hljs-number">2048</span>)  
privKey = key.exportKey(passphrase=encryptedpass)  
pubKey = key.publickey().exportKey()  
<span class="hljs-keyword">print</span> privKey  
</code></pre>
<hr>
<h3 class="mt-4" ><a id="pycrypto_Generate_Encrypted_RSA_Keys_in_PKCS8_format_158"></a>pycrypto Generate Encrypted RSA Keys in PKCS8 format</h3>
<pre><code class="language-python">encryptedpass = <span class="hljs-string">"myverystrongpassword"</span>  
key = RSA.generate(<span class="hljs-number">2048</span>)  
privKey = key.exportKey(passphrase=encryptedpass,pkcs=<span class="hljs-number">8</span>)  
pubKey = key.publickey().exportKey()  
<span class="hljs-keyword">print</span> privKey  
</code></pre>
<hr>
<h3 class="mt-4" ><a id="pycrypto_Generate_RSA_key_and_export_in_DER_Format_167"></a>pycrypto Generate RSA key and export in DER Format</h3>
<pre><code class="language-python">key = RSA.generate(<span class="hljs-number">2048</span>)  
<span class="hljs-comment">#Export RSA key in DER format  </span>
privKey = key.exportKey(<span class="hljs-string">'DER'</span>)  
pubKey =  key.publickey().exportKey(<span class="hljs-string">'DER'</span>)
</code></pre>
<hr>
<h3 class="mt-4" ><a id="pycrypto_Generate_RSA_Keys_and_Perform_Encryption_and_Decryption_177"></a>pycrypto Generate RSA Keys and Perform Encryption and Decryption</h3>
<pre><code class="language-python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA  
<span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> asn1  
<span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode  
  
<span class="hljs-comment">#Generate RSA Keys and Perform ENcryption and Decryption  </span>
key = RSA.generate(<span class="hljs-number">2048</span>)  
pubKey =  key.publickey()  
plaintextMessage = <span class="hljs-string">"Hello 8gwifi.org"</span>  
  
<span class="hljs-comment">#RSA Encryption Using Public Key  </span>
cipherText = pubKey.encrypt(plaintextMessage,<span class="hljs-number">32</span>)  
  
<span class="hljs-comment">#RSA Decryption Using Private Key  </span>
<span class="hljs-keyword">print</span> key.decrypt(cipherText)
</code></pre>
<h3 class="mt-4" ><a id="pycrypto_Load_RSA_Keys_and_Perform_Encryption_and_Decryption_196"></a>pycrypto Load RSA Keys and Perform Encryption and Decryption</h3>
<pre><code class="language-python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA
f = open(<span class="hljs-string">'/tmp/rsakey.pem'</span>, <span class="hljs-string">'rb'</span>)  
f1 = open(<span class="hljs-string">'/tmp/rsapub.pem'</span>, <span class="hljs-string">'rb'</span>)  
  
key = RSA.importKey(f.read())  
pubKey = RSA.importKey(f1.read())  
  
<span class="hljs-comment">#RSA Encryption Using Public Key  </span>
cipherText = pubKey.encrypt(plaintextMessage,<span class="hljs-number">32</span>)  
  
<span class="hljs-comment">#RSA Decryption Using Private Key  </span>
<span class="hljs-keyword">print</span> key.decrypt(cipherText)
</code></pre>
<hr>
<h2 class="mt-4" ><a id="pycrypto_PKCS1_OAEP_213"></a>pycrypto PKCS1_OAEP</h2>
<p>RSA encryption protocol according to PKCS#1 OAEP</p>
<p>Load the RSA keys and then performing encryption/decryption using PKCS1_OAEP</p>
<pre><code class="language-python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA  
<span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP  
  
plaintextMessage = <span class="hljs-string">"Hello 8gwifi.org"</span>  
f = open(<span class="hljs-string">'/tmp/rsakey.pem'</span>, <span class="hljs-string">'rb'</span>)  
f1 = open(<span class="hljs-string">'/tmp/rsapub.pem'</span>, <span class="hljs-string">'rb'</span>)  
  
key = RSA.importKey(f.read())  
pubKey = RSA.importKey(f1.read())  
  
cipher = PKCS1_OAEP.new(pubKey)  
cipherText = cipher.encrypt(plaintextMessage)  
  
<span class="hljs-comment">#RSA Decryption Using Private Key  </span>
  
cipher = PKCS1_OAEP.new(key)  
<span class="hljs-keyword">print</span> cipher.decrypt(cipherText)
</code></pre>
<hr>
<h3 class="mt-4" ><a id="pycrypto_PKCS1_PSS__Sign_Verify_239"></a>pycrypto PKCS1_PSS  Sign Verify</h3>
<pre><code class="language-python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA  
<span class="hljs-keyword">from</span> Crypto.Signature <span class="hljs-keyword">import</span> PKCS1_PSS <span class="hljs-keyword">as</span> PKCS  
<span class="hljs-keyword">from</span> Crypto.Hash <span class="hljs-keyword">import</span> SHA  
  
plaintextMessage = <span class="hljs-string">"Hello 8gwifi.org"</span>  
  
f = open(<span class="hljs-string">'/tmp/rsakey.pem'</span>, <span class="hljs-string">'rb'</span>)  
f1 = open(<span class="hljs-string">'/tmp/rsapub.pem'</span>, <span class="hljs-string">'rb'</span>)  
  
key = RSA.importKey(f.read())  
pubKey = RSA.importKey(f1.read())  
  
<span class="hljs-comment">#RSA Signature Generation  </span>
h = SHA.new()  
h.update(plaintextMessage)  
signer = PKCS.new(key)  
signature = signer.sign(h)  
  
<span class="hljs-comment">#At the receiver side, verification can be done like using the public part of the RSA key:  </span>
<span class="hljs-comment">#RSA Signature Verification  </span>
h = SHA.new()  
h.update(plaintextMessage)  
verifier = PKCS.new(pubKey)  
<span class="hljs-keyword">if</span> verifier.verify(h, signature):  
    <span class="hljs-keyword">print</span> <span class="hljs-string">"The signature is authentic."</span>  
<span class="hljs-keyword">else</span>:  
    <span class="hljs-keyword">print</span> <span class="hljs-string">"The signature is not authentic."</span>
</code></pre>
<hr>
<h2 class="mt-4" ><a id="pycrypto_PKCS1_v1_5_EncryptDecrypt_271"></a>pycrypto PKCS1_v1_5 Encrypt/Decrypt</h2>
<p>A DER exported KEY used to perform encryption and decryption.</p>
<pre><code class="language-python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA  
<span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5  
plaintextMessage = <span class="hljs-string">"Hello 8gwifi.org"</span>  
  
key = RSA.generate(<span class="hljs-number">2048</span>)  
pubkey = RSA.importKey(key.publickey().exportKey(<span class="hljs-string">'DER'</span>))  
privkey = RSA.importKey(key.exportKey(<span class="hljs-string">'DER'</span>))  
cipher = PKCS1_v1_5.new(pubkey)  
ciphertext = cipher.encrypt(plaintextMessage)  
  
  
dcipher = PKCS1_v1_5.new(privkey)  
<span class="hljs-comment">#``sentinel`` a value that resembles a plausable random, invalid  </span>
secret = dcipher.decrypt(ciphertext,<span class="hljs-string">"sentinel"</span>)  
<span class="hljs-keyword">print</span> secret  
  
<span class="hljs-comment">### pycrypto PEM Example  </span>
  
key = RSA.generate(<span class="hljs-number">2048</span>)  
pubkey = RSA.importKey(key.publickey().exportKey(<span class="hljs-string">'PEM'</span>))  
privkey = RSA.importKey(key.exportKey(<span class="hljs-string">'PEM'</span>))  
cipher = PKCS1_v1_5.new(pubkey)  
ciphertext = cipher.encrypt(plaintextMessage)  
  
  
dcipher = PKCS1_v1_5.new(privkey)  
<span class="hljs-comment">#``sentinel`` a value that resembles a plausable random, invalid  </span>
secret = dcipher.decrypt(ciphertext,<span class="hljs-string">"sentinel"</span>)  
<span class="hljs-keyword">print</span> secret
</code></pre>

<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="addcomments.jsp"%>
      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 
         
         
         <%@ include file="related-python.jsp"%>
         
         <%@ include file="related-go.jsp"%>
         
         <%@ include file="related-cryptography.jsp"%>
         
         <%@ include file="related-window-crypto.jsp"%>

		 
          <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         <%@ include file="related-kube.jsp"%>
         
         
         <%@ include file="related-openstack.jsp"%>
         <%@ include file="related-linux.jsp"%>
         
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>


      </div>
      
      <!-- /.row -->


	
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>