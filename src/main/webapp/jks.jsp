<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Java Keytool Commands, gnerate keystore, keytool to generate rsa,dsa,ec key pair, keytool generate csr, list keystore, import rootCA to keystore, import x.509,pkcs12,der,certificate to keystore, Android keystore opertaion">
    <meta name="keywords" content="Java Keytool Commands, gnerate keystore, keytool to generate rsa,dsa,ec key pair, keytool generate csr, list keystore, import rootCA to keystore, import x.509,pkcs12,der,certificate to keystore,Get Key Fingerprints,Verify APK signature,Verify APK keystore signature,Export Certificate">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>Java keytool keystore comamnd tutorial </title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "jks.jsp"
  },
  "name" : "Java Keytool Commands",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "Java Keytool Commands",
  "image":"img/jks.png",
  "datePublished" : "2018-09-29",
  "dateModified": "2018-09-29",
  "articleSection" : "Java Keytool Commands",
  "articleBody" : [ "Generate Keystore","keytool stores the keys and certificates in a keystore","keytool Generate RSA key pai","keytool Generate DSA key pair","keytool Generate EC key pair", "keytool Generate CSR from existing keystore", "keytool List Keystore" , "keytool Import rootCA to Keystore" , "keytool Import a Certificate to keystore", "keytool Import CA into Trusted Certs", "keytool Import DER in keystore", "keytool Import PKCS12 in Keystore", "Export Certificate from Keystore", "Check Keystore", "Delete Alias from Keystore", "Get Key Fingerprints", "Verify APK signature", ""],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Java Keytool Commands</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Saturday September 29, 2018</p>
          </p>
          
          <!-- <img class="img-fluid rounded" src="img/tls1.3_06.png" height="100" width="400" alt="Refrence 8gwifi "> -->
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>

<h2 class="mt-4">Reader Note </h3>

<p><mark>This sample chapter </mark> extracted from the book, <a href="https://leanpub.com/crypto">The Modern Cryptograhy CookBook </a>. The Book theme is<mark>Cryptography is for EveryOne. Learn from Crypto Principle to Applied Cryptography With Practical Example</mark> </p>
<p><mark>Get this book on Just  <a href="http://leanpub.com/crypto/c/NPsT3TZmqrNS" target="_blank" rel="noopener">  $9 </a> by availing coupon discount </mark>   </p>
<p><iframe class="embed-responsive-item" width='160' height='400' src='https://leanpub.com/crypto/embed' frameborder='0' allowtransparency='true'></iframe></p>

<hr>
<p><strong>keytool</strong> is a key and certificate management utility, <strong>keytool</strong> stores the keys and certificates in a <strong>keystore</strong>.</p>
<h2 class="mt-4"><a id="Generate_Keystore_4"></a>Generate Keystore</h2>
<p><strong>Option Defaults</strong></p>
<ul>
<li>
<p>-<strong>alias</strong> "mykey"</p>
</li>
<li>
<p><strong>-keyalg</strong><br>
&quot;<strong>DSA</strong>&quot; (when using -genkeypair)<br>
&quot;<strong>DES</strong>&quot; (when using -genseckey)</p>
</li>
<li>
<p><strong>-keysize</strong><br>
<strong>2048</strong> (when using <strong>-genkeypair and -keyalg is "RSA"</strong>)<br>
<strong>1024</strong> (when using <strong>-genkeypair and -keyalg is "DSA"</strong>)<br>
<strong>256</strong> (when using <strong>-genkeypair and -keyalg is "EC"</strong>)<br>
<strong>56</strong> (when using <strong>-genseckey and -keyalg is "DES"</strong>)<br>
<strong>168</strong> (when using <strong>-genseckey and -keyalg is "DESede"</strong>)</p>
</li>
<li>
<p><strong>-validity</strong> 90</p>
</li>
<li>
<p><strong>-keystore</strong> the file named <strong>.keystore</strong> in the userâ€™s home directory</p>
</li>
<li>
<p><strong>-file</strong> stdin if reading, stdout if writing</p>
</li>
<li>
<p><strong>-protected</strong> false</p>
</li>
</ul>
<h2 class="mt-4"><a id="Generate_RSA_key_pair_25"></a>Generate RSA key pair</h2>
<pre><code class="html">keytool -genkey -alias mydomain -keyalg RSA -keystore keystore.jks -keysize 2048
</code></pre>
<h2 class="mt-4"><a id="Generate_DSA_key_pair_29"></a>Generate DSA key pair</h2>
<pre><code class="html"> keytool -genkey -alias mydomain1 -keyalg DSA -keystore keystore.jks -keysize 2048
</code></pre>
<h2 class="mt-4"><a id="Generate_EC_key_pair_33"></a>Generate EC key pair</h2>
<pre><code class="html">keytool -genkey -alias mydomain3 -keyalg EC -keystore keystore.jks -keysize 256
</code></pre>
<p>Alternatively <strong>storepass</strong> can be passed</p>
<pre><code class="html">keytool -genkey -keyalg RSA -alias domain1 -keystore keystore.jks  -storepass hello123 -validity 360 -keysize 2048
</code></pre>
<h2 class="mt-4"><a id="Generate_CSR_from_existing_keystore_41"></a>Generate CSR from existing keystore</h2>
<p>Generate a <strong>certificate signing request (CSR)</strong> for an existing Java keystore</p>
<pre><code class="html">keytool -certreq -alias mydomain -keystore keystore.jks -file  8gwifi.csr
</code></pre>
<p>This will generate a new CSR  pem encoded begins with  <code>-----BEGIN NEW CERTIFICATE REQUEST-----</code>  ends    -<code>----END NEW CERTIFICATE REQUEST-----</code></p>
<h2 class="mt-4"><a id="List_Keystore_49"></a>List Keystore</h2>
<p>The <code>keytool -list</code> prints the contents of the keystore entry identified by alias. If no alias is specified, the contents of the entire keystore are printed.</p>
<pre><code class="html">keytool -list -keystore keystore.jks
Enter keystore password:  
</code></pre>
<p>This will list out all certificate finger print added in the keystore</p>
<pre><code class="html">Keystore type: JKS
Keystore provider: SUN

Your keystore contains 3 entries

mydomain3, Aug 1, 2018, PrivateKeyEntry, 
Certificate fingerprint (SHA1): 65:9A:6F:43:2C:10:E7:56:4C:EF:B7:70:0B:3D:A8:66:41:DA:5B:22
mydomain1, Aug 1, 2018, PrivateKeyEntry, 
Certificate fingerprint (SHA1): DB:3E:30:83:C8:FD:E3:A5:28:BB:0B:D7:3B:FD:ED:B2:9B:75:46:37
mydomain, Aug 1, 2018, PrivateKeyEntry, 
Certificate fingerprint (SHA1): C5:A4:D7:24:10:70:FA:4C:57:36:1C:32:A6:AE:BA:2A:72:A6:33:DB
</code></pre>
<p><strong>verbose</strong> option  check</p>
<pre><code class="html">keytool -list -v -keystore keystore.jks
</code></pre>
<p>Check  a particular keystore entry using  <strong><code>-alias</code></strong> option</p>
<pre><code class="html">keytool -list -v -keystore keystore.jks -alias mydomain
</code></pre>
<h2 class="mt-4"><a id="Import_rootCA_to_Keystore_79"></a>Import rootCA to Keystore</h2>
<ul>
<li>
<p><strong>Import</strong> a root or intermediate CA certificate to an existing Java keystore</p>
<pre><code class="html"> keytool -import -trustcacerts -alias root -file rootCA.pem -keystore keystore.jks
 Enter keystore password:  
 Owner: CN=8gwifi.org, OU=Cryptography, O=8gwifi, L=IN, ST=BLR, C=IN
 Issuer: CN=8gwifi.org, OU=Cryptography, O=8gwifi, L=IN, ST=BLR, C=IN
 Serial number: c12f5c50dd458faf
 Valid from: Wed Aug 01 09:37:03 IST 2018 until: Fri May 21 09:37:03 IST 2021
 Certificate fingerprints:
      MD5:  B9:88:92:11:11:ED:74:B6:D1:92:DB:61:07:60:34:B3
      SHA1: 00:E7:41:90:9F:3E:1D:DA:B0:C0:18:6B:C2:34:E7:71:38:B7:57:3C
      SHA256: 68:D4:CA:2B:23:0E:7B:EB:A6:C3:AE:FB:57:B9:A4:A3:F0:E3:FA:33:53:E9:89:99:4E:3A:18:F2:26:8C:52:BF
      Signature algorithm name: SHA256withRSA
      Version: 3
</code></pre>
</li>
</ul>
<h2 class="mt-4"><a id="Import_a_Certificate_to_keystore_97"></a>Import a Certificate to keystore</h2>
<p>Import a  primary certificate to an existing Java keystore, The procedure is same for  importing <strong>Certificate/intermediateCA/rootCA</strong></p>
<pre><code class="html">keytool -import -trustcacerts -alias mydomain -file mydomain.crt -keystore keystore.jks
</code></pre>
<h2 class="mt-4"><a id="Import__CA_into_Trusted_Certs_103"></a>Import  CA into Trusted Certs</h2>
<p>Import  CA into Trusted Certs  <strong>$JAVA_HOME/jre/lib/security/cacerts</strong></p>
<pre><code class="html">keytool -import -trustcacerts -file /path/to/ca/ca.pem -alias CA_ALIAS -keystore $JAVA_HOME/jre/lib/security/cacerts
</code></pre>
<h2 class="mt-4"><a id="Import_DER__in_keystore_109"></a>Import DER  in keystore</h2>
<p>Change format from <strong>cert.crt</strong> from <strong>PEM</strong> (-<code>---BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----</code>) to <strong>DER</strong></p>
<pre><code class="html">openssl x509 -in cert.crt -inform PEM -out cert.der -outform DER
</code></pre>
<p>Create KeyStore keystore.jks for your domain ("alias" in keytool, "common name" or CN in openssl req)</p>
<pre><code class="html">keytool -import -trustcacerts -alias 8gwifi -file cert.der -keystore keystore.jks
</code></pre>
<h2 class="mt-4"><a id="Import_PKCS12_in_Keystore_119"></a>Import PKCS12 in Keystore</h2>
<p>Convert the certificate and private key to <strong>PKCS 12 (.p12)</strong></p>
<pre><code class="html">openssl pkcs12 -export -in rootCA.pem -inkey rootCA.key -out my.p12
Enter pass phrase for rootCA.key:
Enter Export Password:
Verifying - Enter Export Password:
</code></pre>
<p>Then add the <strong>my.p12</strong> in the key store</p>
<pre><code class="html">$ keytool -v -importkeystore -srckeystore my.p12 -srcstoretype PKCS12 -destkeystore keystore.jks -deststoretype JKS
Enter destination keystore password:  
Enter source keystore password:  
Entry for alias 1 successfully imported.
Import command completed:  1 entries successfully imported, 0 entries failed or cancelled
[Storing keystore.jks]
</code></pre>
<h2 class="mt-4"><a id="Export_Certificate_from_Keystore_138"></a>Export Certificate from Keystore</h2>
<p><strong>Export</strong> a certificate from a keystore</p>
<pre><code class="html">    keytool -export -alias mydomain -file mydomain.crt -keystore  keystore.jks
    Enter keystore password:
    Certificate stored in file &lt;mydomain.crt&gt;
</code></pre>
<h2 class="mt-4"><a id="Check__Keystore_147"></a>Check  Keystore</h2>
<p>Check a stand-alone certificate</p>
<pre><code class="html">    keytool -printcert -v -file mydomain.crt
</code></pre>
<p>The output</p>
<pre><code class="html">Owner: CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown
Issuer: CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown
Serial number: 490e614f
Valid from: Wed Aug 01 09:23:55 IST 2018 until: Tue Oct 30 09:23:55 IST 2018
Certificate fingerprints:
     MD5:  99:BC:8E:3B:54:AC:69:0E:FC:44:6F:5D:FC:5D:B5:2B
     SHA1: C5:A4:D7:24:10:70:FA:4C:57:36:1C:32:A6:AE:BA:2A:72:A6:33:DB
     SHA256: 9E:22:F6:1F:78:BD:A7:01:35:26:DF:01:DE:85:4E:63:27:63:0C:E8:69:6F:39:2D:37:65:F7:77:4A:57:04:11
     Signature algorithm name: SHA256withRSA
     Version: 3
</code></pre>
<h2 class="mt-4"><a id="Delete_Alias_from__Keystore_166"></a>Delete Alias from  Keystore</h2>
<p><strong>Delete</strong> a certificate from a Java Keytool keystore</p>
<p><code>keytool -delete -alias mydomain2 -keystore keystore.jks</code></p>
<h2 class="mt-4"><a id="Change_keystore_password_172"></a>Change keystore password</h2>
<pre><code class="html">keytool -storepasswd -new new_storepass -keystore keystore.jks
</code></pre>
<h2 class="mt-4"><a id="Android_176"></a>Android</h2>
<p>Android related <code>kyetool</code> command used for debug and troubleshooting, though <strong>keytool</strong> is agnostic to platform (android  or linux env) and itâ€™s a cert and key managed tool, this section will help android user to locate and troubleshoot android <strong>keytsore</strong>  which is present in <strong>apk</strong> file</p>
<h2 class="mt-4"><a id="Generate_Debug_Keystore_180"></a>Generate Debug Keystore</h2>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>keystore</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>-keystore</td>
<td>debug.keystore</td>
</tr>
<tr>
<td>-storepass</td>
<td>mykeystorepassword</td>
</tr>
<tr>
<td>-alias</td>
<td>myalias</td>
</tr>
<tr>
<td>-keypass</td>
<td>myandroidpass</td>
</tr>
<tr>
<td>-keyalg</td>
<td>RSA</td>
</tr>
<tr>
<td>-dname</td>
<td>C=US, O=Android, CN=Android Debug</td>
</tr>
</tbody>
</table>
<pre><code class="html">keytool -genkey -v -keystore my.keystore -storepass mykeystorepassword -alias myalias -keypass myandroid -keyalg RSA -keysize 2048 -validity 10000 -dname &quot;C=US, O=Android, CN=Android Debug&quot;
</code></pre>
<p>This will generate <strong>debug.keystore</strong></p>
<pre><code class="html">Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 10,000 days
for: C=US, O=Android, CN=Android Debug
[Storing my.keystore]
</code></pre>
<p><strong>Similar process will go to create release.keystore with CN name Modification</strong></p>
<h2 class="mt-4"><a id="Get_Key_Fingerprints_202"></a>Get Key Fingerprints</h2>
<p>To get the <strong>keystore</strong> certificate <strong>fingerprints</strong> of a given alias you can do:</p>
<pre><code class="html">keytool -list -v -keystore [keystore path] -alias [alias-name] -storepass [storepass] -keypass [keypass] 
</code></pre>
<p>The <strong>certificate fingerprints</strong></p>
<pre><code class="html">$ keytool -list -v -keystore debug.keystore  -alias myalias  -storepass mykeystorepassword  -keypass myandroid
Alias name: myalias
Creation date: Aug 1, 2018
Entry type: PrivateKeyEntry
Certificate chain length: 1
Certificate[1]:
Owner: C=US, O=Android, CN=Android Debug
Issuer: C=US, O=Android, CN=Android Debug
Serial number: 3ca33a60
Valid from: Wed Aug 01 08:24:42 IST 2018 until: Sun Dec 17 08:24:42 IST 2045
Certificate fingerprints:
     MD5:  57:C6:C5:06:1C:29:69:9E:EF:E0:A4:35:3A:3F:37:ED
     SHA1: D1:FC:1A:52:BA:43:AE:D0:42:46:22:A5:3F:38:10:D7:7B:BB:05:B5
     SHA256: C3:B2:F7:35:24:C1:51:C7:DD:DB:9F:54:BA:B4:D4:8D:2C:EC:A7:2B:04:40:1A:54:A5:B8:4C:35:33:14:34:78
     Signature algorithm name: SHA256withRSA
     Version: 3
</code></pre>
<p>if you donâ€™t know the <strong>alias</strong> name list down your <strong>keystore</strong></p>
<pre><code class="html">$ keytool -list -v -keystore debug.keystore
Enter keystore password: 
</code></pre>
<h2 class="mt-4"><a id="Verify_APK_signature_233"></a>Verify APK signature</h2>
<pre><code class="html">keytool -list -printcert -jarfile application.apk
</code></pre>
<p>Using <strong>jarsigner</strong></p>
<pre><code class="html">jarsigner -verify -verbose -certs application.apk
jarsigner -verify -verbose:summary -certs application.apk
</code></pre>
<h2 class="mt-4"><a id="Verify_APK_keystore_signature_243"></a>Verify APK keystore signature</h2>
<p>find out which <strong>keystore</strong> was used to sign an app?</p>
<ul>
<li>
<p>Unzip apk</p>
</li>
<li>
<p>Get MD5 and SHA1 of certificate of APK:</p>
<pre><code class="html"> $ keytool -printcert -file ./META-INF/ANDROID_.RSA
</code></pre>
</li>
<li>
<p>Get MD5 and SHA1 of keystore:</p>
<pre><code class="html"> $ keytool -list -keystore signing-key.keystore
</code></pre>
</li>
</ul>
<p>Compare <strong>MD5</strong>/<strong>SHA1</strong> and if they are the <strong>same</strong>, so the APK was signed with <strong>signing-key.keystore</strong>.</p>
<h2 class="mt-4"><a id="Export_Certificate_257"></a>Export Certificate</h2>
<pre><code class="html">$ keytool -exportcert -alias myalias -keystore debug.keystore -file path_to_certificate_file
Enter keystore password:  
Certificate stored in file &lt;path_to_certificate_file&gt;
</code></pre>

<%@ include file="thanks.jsp"%>

<hr>


      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 

		 <%@ include file="related-cryptography.jsp"%>
		 <%@ include file="related-window-crypto.jsp"%>
          <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         <%@ include file="related-kube.jsp"%>
         
         
         
         <%@ include file="related-openstack.jsp"%>
         <%@ include file="related-linux.jsp"%>
         
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>

      </div>
      <!-- /.row -->


	<%@ include file="addcomments.jsp"%>
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>