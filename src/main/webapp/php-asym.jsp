<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="php openssl tutorial on openssl_pkey_new, php openssl_pkey_new example, php openssl functions, php generate rsa,dsa,ec key pair, php Asymmetric cryptography">
    <meta name="keywords" content="openssl  openssl_pkey_new, php openssl_pkey_new example, php cryptography topics, php security, php interview questions, php openssl functions, php book , php key pair generation, rsa dsa, ec">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>php generate rsa,dsa,ec key pairs</title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/php-asym.jsp"
  },
  "name" : "php asymetric Cryptography Introduction",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "php openssl tutorial on openssl_pkey_new",
  "image":"https://8gwifi.org/docs/img/php/Keylength.png",
  "datePublished" : "2018-12-12",
  "dateModified": "2018-12-12",
  "articleSection" : "php openssl tutorial on openssl_pkey_new",
  "articleBody" : [ "php openssl example ", "php openssl_pkey_new" , "php openssl functions", "php cryptography" , "php generate rsa key" , "php gerenarate dsa keys" , "php generate ec keys"],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">php Asymmetric cryptography </h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Wednesday December 12 , 2018</p>
          </p>
          
          
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          
          <hr>
<p>Asymmetric cryptography is a branch of cryptography where a secret key can be divided into two parts, a <strong>public key</strong> and a <strong>private key.</strong> The public key can be given to anyone, trusted or not, while the private key must be kept secret (just like the key in symmetric cryptography).</p>
<p>Encryption with asymmetric cryptography works in a slightly different way from symmetric encryption. Someone with the public key is able to encrypt a message, providing confidentiality, and then only the person in possession of the private key is able to decrypt it.</p>
<p>Some Key Algorithms for Asymmetric cryptography</p>
<ul>
<li>Elliptic curve cryptography</li>
<li>RSA</li>
<li>Diffie-Hellman key exchange</li>
<li>DSA</li>
</ul>
<p>The length of the cryptographic key is perhaps the most important security parameter that can be set at the discretion of the security professional</p>
<p>As of 2016, the NSA's Commercial National Security Algorithm Suite includes</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Cryptosystem</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>RSA 3072-bit or larger</td>
<td>Key Establishment, Digital Signature</td>
</tr>
<tr>
<td>Diffie-Hellman (DH) 3072-bit or larger</td>
<td>Key Establishment</td>
</tr>
<tr>
<td>ECDH with NIST P-384</td>
<td>Key Establishment</td>
</tr>
<tr>
<td>ECDSA with NIST P-384</td>
<td>Digital Signature</td>
</tr>
<tr>
<td>SHA-384</td>
<td>Integrity</td>
</tr>
<tr>
<td>AES-256</td>
<td>Confidentiality</td>
</tr>
</tbody>
</table>
<p>For More information around key length requirement visit <a href="https://www.keylength.com/en/4/">keylength.com</a></p>
<p><img class="img-fluid rounded" src="img/php/Keylength.png" alt=""></p>
<h3><a id="Generating_Asymmetric_Key_Pair_31"></a>Generating Asymmetric Key Pair</h3>
<p><strong>openssl_pkey_new</strong>: Generates a new private key and public key pair.</p>
<ul>
<li>Supported PHP Versions (<strong>PHP 4 &gt;= 4.2.0, PHP5, PHP 7</strong>)</li>
</ul>
<p>The Syntax</p>
<p></p>
<pre><code class="language-php">openssl_pkey_new ([ <span class="hljs-keyword">array</span>  <span class="hljs-variable">$configargs</span> ] )
</code></pre>
<ul>
<li><strong>configargs</strong>:  By default, the information in your system <em>openssl.conf</em> is used to initialize the request.</li>
</ul>
<p></p>
<pre><code class="language-php"><span class="hljs-comment">// Configuration for 4096 RSA key Pair with Digest Algo 512  </span>
  
<span class="hljs-variable">$config</span> = <span class="hljs-keyword">array</span>(  
  <span class="hljs-string">"digest_alg"</span> =&gt; <span class="hljs-string">"sha512"</span>,  
  <span class="hljs-string">"private_key_bits"</span> =&gt; <span class="hljs-number">1024</span>,  
  <span class="hljs-string">"private_key_type"</span> =&gt; OPENSSL_KEYTYPE_RSA,  
);
</code></pre>
<p><strong>private_key_type</strong> can be</p>
<ul>
<li>OPENSSL_KEYTYPE_RSA</li>
<li>OPENSSL_KEYTYPE_DSA</li>
<li>OPENSSL_KEYTYPE_DH</li>
<li>OPENSSL_KEYTYPE_EC</li>
</ul>
<p><strong>Examples</strong></p>
<h3><a id="Generate_RSA_Key_Pair_in_EncryptedNonEncrypted__Format_68"></a>Generate RSA Key Pair in Encrypted/NonEncrypted  Format</h3>
<p></p>
<pre><code class="language-php"><span class="hljs-preprocessor">&lt;?php</span>  
<span class="hljs-comment">/**  
 * Created by https://8gwifi.org  
  * User: Anish Nath  
 * Date: 2018-12-17 * Time: 10:05 */</span>  
  
<span class="hljs-comment">// Configuration for 4096 RSA key Pair with Digest Algo 512  </span>
 
<span class="hljs-variable">$config</span> = <span class="hljs-keyword">array</span>(  
  <span class="hljs-string">"digest_alg"</span> =&gt; <span class="hljs-string">"sha512"</span>,  
  <span class="hljs-string">"private_key_bits"</span> =&gt; <span class="hljs-number">2048</span>,  
  <span class="hljs-string">"private_key_type"</span> =&gt; OPENSSL_KEYTYPE_RSA,  
);  
 
<span class="hljs-comment">// Create the keypair  </span>
<span class="hljs-variable">$res</span>=openssl_pkey_new(<span class="hljs-variable">$config</span>);  
<span class="hljs-comment">// Get private key  </span>
openssl_pkey_export(<span class="hljs-variable">$res</span>, <span class="hljs-variable">$privkey</span> );  
<span class="hljs-comment">// Get public key  </span>
<span class="hljs-variable">$pubkey</span>=openssl_pkey_get_details(<span class="hljs-variable">$res</span>);  
<span class="hljs-variable">$pubkey</span>=<span class="hljs-variable">$pubkey</span>[<span class="hljs-string">"key"</span>];  
  
<span class="hljs-keyword">echo</span> <span class="hljs-string">"====PKCS1 RSA Key in Non Encrypted Format ====\n"</span>;  
var_dump(<span class="hljs-variable">$privkey</span>);  
<span class="hljs-keyword">echo</span> <span class="hljs-string">"====PKCS1 RSA Key in Encrypted Format====\n "</span>;  
  
<span class="hljs-comment">// Get private key in Encrypted Format  </span>
openssl_pkey_export(<span class="hljs-variable">$res</span>, <span class="hljs-variable">$privkey</span>,<span class="hljs-string">"myverystrongpassword"</span> );  
<span class="hljs-comment">// Get public key  </span>
<span class="hljs-variable">$pubkey</span>=openssl_pkey_get_details(<span class="hljs-variable">$res</span>);  
<span class="hljs-variable">$pubkey</span>=<span class="hljs-variable">$pubkey</span>[<span class="hljs-string">"key"</span>];  
var_dump(<span class="hljs-variable">$privkey</span>);  
<span class="hljs-keyword">echo</span> <span class="hljs-string">"RSA Public Key \n "</span>;  
var_dump(<span class="hljs-variable">$pubkey</span>);
</code></pre>
<p>The above example will output something similar to:</p>
<p></p>
<pre><code class="language-console">$ /usr/bin/php pkey_new_rsa.php
====PKCS1 RSA Key in Non Encrypted Format ====
string(916) &quot;-----BEGIN PRIVATE KEY-----
MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAN5Grau1PqtgQNt3
SpFkPVlxkMfoZg2Z1/mdgD3cWm6YinCpfdeoiVGqVH+MitBQjFHFhTF467tQuH76
43rJI9CZNaWF+E8iwOhRc8Fh+lGVjFBJ1uYQbT1nQ2dPEGAVgLSuatUYi4bQo2Vi
x04B352+QmTYWjLdVRRlR43xdrNvAgMBAAECgYEA0YYMVYyey4sK+BXF27GCxxpv
IJHoCTAYzzpxVV6ufAwci8CpWC2Na8bEqgsAGweijb5EJHNYupSHpWK4JdkOgOPy
3/wpPL/fE0VveWmLUTpyVz7A4peEms8PX+qggsjFzP7TAZbEJZoSIdWwZGCkleu6
AVDFOothmVOjMfslzYkCQQD/gE9FJDxlXkq7SIi1nwrWKDRBaT7LzUEoDEjWQhHS
ZI/OvP4GBUUIbvtRPoZwjCZfxC3x9bqhppLsVox9//UjAkEA3rXDl0MAq/keXqhf
gHtOSENPv7XBp605TyogvRaA+obFy/ug3uAhD4TT7AW+bQ729JuB/TG8/84pmWlB
iixrRQJAMAjOXmBWnnQgtp8HXKXe4q5CTL3dmXEoO8A7fVSEhzpystpjI3ygItrC
kt6fZc9jc4OtY5zgDn4Dhz0qQpH5YwJBAL0po9zpszte2FXMK3nkweQNEEKkbb0v
G9tKzA3vfFPOf1i3/LbxpgMZbist4cWeDVJMd4eIZKDeCmVciqeC/QUCQQDcxTgQ
5apClv2+gDxa3WNac0uq3ARn964dtiX4T793MXPXXQAdcNEdzoGe7QD9GIioxLpN
v1L22DBC8CVy3oru
-----END PRIVATE KEY-----
&quot;
====PKCS1 RSA Key in Encrypted Format====
 string(1041) &quot;-----BEGIN ENCRYPTED PRIVATE KEY-----
MIICxjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIG7dKRedVC1wCAggA
MBQGCCqGSIb3DQMHBAhCcAUNBTl43QSCAoBSVs3x46TwKGGYkcMuIpTTl/JewbK3
wpamx/XHmEg//kEC7t36BwdqmuiOqTdhKxIgCADaXyZJilv8oij5kMyJrO2MGS2I
uBoWiNrRGu1VfkJbyTecOZ5lY7h6kjbT+0aB2FxNo8Ru6V0Eixfgf1SYL//Ruj0N
F7AMXyQ2pQzbH/Dj1+boRmFPR1/qp90omLMslq5/QPW+guXj+DyDnpkWR+Su+0vs
rPhDylBkiZjYlsLe4QXoOT3S2zqM+RGnPmYjzYBqPuCTOXG4DuSk/4PqM8fZcoMb
gWrXia2Q9mulMERkCHvG23naLoDgFEANu9/5JvEL0gPZZVHkFhZ8WQwAnj3/LQW/
HdMjj60QYe2LSGDpZcq2kDqjOBRhKHV5utQjlQ+3yXkdd0+WJTlRsUPg/fYO9PPq
RWuPYPmUqjw7z9yJ1IU4FbbsAjb0cyeOHQmeTxcIWQfvyPrMYm7bM8pMq6FH39hs
1YfyCzRJ7HtynYLXs5djdA+BXZS+uCucg/YYHnuTz3XvKZ60fE8audcchdWAXeJm
3lLhhjsg0w9AUrV4DJCNca8sy5CyXqGYBu+UEtwGGV+Hq8iG+mtrhtNEej92kqWl
0qHMFQuW6rqa9bwitdSCnjlF2ZIvDfQoy0L36oRze670NljBQzS1fQjULM1ViOI/
VotfEToYMXb5c1x1DAfw926rBVCFHNp6+h/Mdi5UPV155v1BD7aYt+EtiZaiWTae
werojsw1+PQ0N9/kgh1Dxey8w8agNuGS4OFjn5hClfahfniRY0zl/fI6ZyWUJ653
7UVI3/LD1GzcusOtGPN1fKSx77wW1/9izDr8EMhER30zyri8RJcor0mq
-----END ENCRYPTED PRIVATE KEY-----
&quot;
RSA Public Key  
 string(272) &quot;-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDeRq2rtT6rYEDbd0qRZD1ZcZDH
6GYNmdf5nYA93FpumIpwqX3XqIlRqlR/jIrQUIxRxYUxeOu7ULh++uN6ySPQmTWl
hfhPIsDoUXPBYfpRlYxQSdbmEG09Z0NnTxBgFYC0rmrVGIuG0KNlYsdOAd+dvkJk
2Foy3VUUZUeN8XazbwIDAQAB
-----END PUBLIC KEY-----
&quot;
</code></pre>
<p><strong>Note</strong>:  that output format is PKCS#1 Type.</p>
<h3><a id="Generate_DSA_Key_Pair_in_Encrypted_Format_162"></a>Generate DSA Key Pair in Encrypted Format</h3>
<p></p>
<pre><code class="language-php"><span class="hljs-preprocessor">&lt;?php</span>  
<span class="hljs-comment">/**  
 * Created by https://8gwifi.org  
  * User: Anish Nath  
 * Date: 2018-12-17 * Time: 10:05 */</span>  
  
<span class="hljs-comment">// Configuration for 2048 DSA key Pair with Digest Algo 512  </span>
  
<span class="hljs-variable">$config</span> = <span class="hljs-keyword">array</span>(  
  <span class="hljs-string">"digest_alg"</span> =&gt; <span class="hljs-string">"sha512"</span>,  
  <span class="hljs-string">"private_key_bits"</span> =&gt; <span class="hljs-number">2048</span>,  
  <span class="hljs-string">"private_key_type"</span> =&gt; OPENSSL_KEYTYPE_DSA,  
);  
  
<span class="hljs-comment">// Create the keypair  </span>
<span class="hljs-variable">$res</span>=openssl_pkey_new(<span class="hljs-variable">$config</span>);  
  
<span class="hljs-comment">// Get private key  </span>
openssl_pkey_export(<span class="hljs-variable">$res</span>, <span class="hljs-variable">$privkey</span>, <span class="hljs-string">"mystrongpassword"</span> );  
  
<span class="hljs-comment">// Get public key  </span>
<span class="hljs-variable">$pubkey</span>=openssl_pkey_get_details(<span class="hljs-variable">$res</span>);  
<span class="hljs-variable">$pubkey</span>=<span class="hljs-variable">$pubkey</span>[<span class="hljs-string">"key"</span>];  
var_dump(<span class="hljs-variable">$privkey</span>);  
var_dump(<span class="hljs-variable">$pubkey</span>);
</code></pre>
<h3><a id="Generate_EC_Key_Pair_193"></a>Generate EC Key Pair</h3>
<p>Elliptic curve based algorithms use significantly smaller key sizes than their non elliptic curve equivalents.</p>
<p>The approximate equivalence in security strength for symmetric algorithms compared to standard asymmetric algorithms and elliptic curve algorithms is shown in the table below.</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>AES Symmetric Keysize (Bits)</th>
<th>RSA and DSA Keysize (Bits)</th>
<th>ECC Keysize (Bits)</th>
</tr>
</thead>
<tbody>
<tr>
<td>80</td>
<td>1024</td>
<td>160</td>
</tr>
<tr>
<td>112</td>
<td>2048</td>
<td>224</td>
</tr>
<tr>
<td>128</td>
<td>3072</td>
<td>256</td>
</tr>
<tr>
<td>192</td>
<td>7680</td>
<td>384</td>
</tr>
<tr>
<td>256</td>
<td>15360</td>
<td>512</td>
</tr>
</tbody>
</table>
<p>Required PHP Version: <strong>(PHP 7 &gt;= 7.1.0)</strong></p>
<p></p>
<pre><code class="language-php">
<span class="hljs-preprocessor">&lt;?php</span>  
<span class="hljs-comment">/**  
 * Created by https://8gwifi.org  
  * User: Anish Nath  
 * Date: 2018-12-17 * Time: 10:05 */</span>  
  
<span class="hljs-comment">// Configuration for 2048 DSA key Pair with Digest Algo 512  </span>
  
<span class="hljs-variable">$config</span> = <span class="hljs-keyword">array</span>(  
  <span class="hljs-string">"digest_alg"</span> =&gt; <span class="hljs-string">"sha512"</span>,  
  <span class="hljs-string">"curve_name"</span> =&gt; prime256v1,  
  <span class="hljs-string">"private_key_type"</span> =&gt; OPENSSL_KEYTYPE_EC,  
);  
 
<span class="hljs-comment">// Create the keypair  </span>
<span class="hljs-variable">$res</span>=openssl_pkey_new(<span class="hljs-variable">$config</span>);  
  
<span class="hljs-comment">// Get private key  </span>
openssl_pkey_export(<span class="hljs-variable">$res</span>, <span class="hljs-variable">$privkey</span>, <span class="hljs-string">"mystrongpassword"</span> );  
  
<span class="hljs-comment">// Get public key  </span>
<span class="hljs-variable">$pubkey</span>=openssl_pkey_get_details(<span class="hljs-variable">$res</span>);  
<span class="hljs-variable">$pubkey</span>=<span class="hljs-variable">$pubkey</span>[<span class="hljs-string">"key"</span>];  
var_dump(<span class="hljs-variable">$privkey</span>);  
var_dump(<span class="hljs-variable">$pubkey</span>);
</code></pre>
<p>The above example will output something similar to:</p>
<p></p>
<pre><code class="language-console">$ /bin/php-7.1.19 pkey_new_ec.php

string(299) &quot;-----BEGIN EC PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,606FAE9BA918BDEC

xo8McQWsbm/5A16e9DLneus2yfWEdSFkiG9DJ3Y9tjN1khWjQ0kKb+L40csSmrel
LvcxyO1pHmKXd5lW68T7sV5tUJwjXEkLslbCiSbqcCp+LT7+fw2Jdz5dEduElZGb
oK/e53CFZl0fL7PM7wDmj6G06F+I19iRL9wf3T8w+rs=
-----END EC PRIVATE KEY-----
&quot;
string(178) &quot;-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWcxIutWEkMXuakdcHhJW3hpOECBo
/7/aqoS7M2ruspT+AVRFN6RPwPkRNnJE4a2I5Sun/Ny0Bg9c+1c0BUFmYw==
-----END PUBLIC KEY-----
&quot;
</code></pre>

<p>Continue Reading Part 2 (php Asymmetric Key Encryption/Decryption/Sign Verify The message)</p>

<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="addcomments.jsp"%>
      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 
         
         
         <%@ include file="related-go.jsp"%>
         
         <%@ include file="related-cryptography.jsp"%>
         
         <%@ include file="related-window-crypto.jsp"%>

		 
          <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         <%@ include file="related-kube.jsp"%>
         
         
         <%@ include file="related-openstack.jsp"%>
         <%@ include file="related-linux.jsp"%>
         
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>


      </div>
      
      <!-- /.row -->

    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>