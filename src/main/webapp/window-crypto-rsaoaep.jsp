<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Web Crypto API RSA-OAEP Generate Keys and Perform rsa oaep Encryption Decryption ">
    <meta name="keywords" content="Web Crypto API rsa encryption decryption,  RSA-OAEP generate keys, rsa keys export to jwk, web crypto deriveKeys ,web crypto live tutorial, windo.crypto javascript examples, Web Cryptography API">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>Web Crypto API RSA-OAEP Generate Keys and Perform Encryption/Decryption </title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/window-crypto-rsaoaep.jsp"
  },
  "name" : "Web Crypto API RSA-OAEP Generate Keys and Perform Encryption/Decryption",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "Web Crypto API AES-GCM Export Keys with JWK format ",
  "image":"https://8gwifi.org/docs/img/rsaoaep.png",
  "datePublished" : "2018-09-21",
  "dateModified": "2018-09-21",
  "articleSection" : "Web Crypto API RSA-OAEP Generate Keys and Perform Encryption/Decryption ",
  "articleBody" : [ "Web Crypto API RSA-OAEP Generate Keys and Perform Encryption/Decryption", "This is the web cryptography api example of performing rsa oaep encryption decryption" , "RSA-OAEP Public Key (JWK)" , "webcrypto api RSA-OAEP Javascript example" , "Generate the RSA-OAEP 2048 bit Keys using SHA-256 Algorithms" , "RSA-OAEP Encryption Example" , "RSA-OAEP decryption Example"],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>

<script type="text/javascript">
    var privateKey;
    var publicKey;

    var cryptoObj = window.crypto || window.msCrypto;

    var iv;

    
    function asciiToUint8Array(str) {
        var chars = [];
        for (var i = 0; i < str.length; ++i)
            chars.push(str.charCodeAt(i));
        return new Uint8Array(chars);
    }

    

    function RSA_encrypt() {

        var plainText = document.getElementById("plainText").value;

        window.crypto.subtle.generateKey({
                    name: "RSA-OAEP",
                    modulusLength: 2048, //can be 1024, 2048, or 4096
                    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                    hash: {
                        name: "SHA-256"
                    }, //can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
                },
                true, //whether the key is extractable (i.e. can be used in exportKey)
                ["encrypt", "decrypt"] //must be ["encrypt", "decrypt"] or ["wrapKey", "unwrapKey"]
            )
            .then(function(key) {
                //returns a keypair object
                publicKey = key.publicKey;
                privateKey = key.privateKey;

                window.crypto.subtle.exportKey("jwk", key.publicKey).then(
                    function(keydata) {
                        publicKeyhold = keydata;
                        publicKeyJson = JSON.stringify(publicKeyhold);
                        document.getElementById("rsapublic").value = publicKeyJson;
                    }
                );

                window.crypto.subtle.exportKey("jwk", key.privateKey).then(
                    function(keydata) {
                        privateKeyhold = keydata;
                        privateKeyJson = JSON.stringify(privateKeyhold);
                        document.getElementById("rsaprivate").value = privateKeyJson;
                    }
                );

                iv = crypto.getRandomValues(new Uint8Array(16));
                window.crypto.subtle.encrypt({
                            name: "RSA-OAEP",
                            iv: iv,
                        },
                        publicKey, //from generateKey or importKey above
                        asciiToUint8Array(plainText) //ArrayBuffer of data you want to encrypt
                    )
                    .then(function(encrypted) {
                        //returns an ArrayBuffer containing the encrypted data
                        document.getElementById("cipherText").value = bytesToHexString(encrypted);
                        document.getElementById("salt").value = bytesToHexString(iv);
                    })
                    .catch(function(err) {
                        console.error(err);
                    });

            })
            .catch(function(err) {
                console.error(err);
            });

    }

    function RSA_decrypt() {
    
    var cipherText = document.getElementById("cipherText").value;
    window.crypto.subtle.decrypt({
                name: "RSA-OAEP",
                iv: iv
            },
            privateKey, //from generateKey or importKey above
            hexStringToUint8Array(cipherText) //ArrayBuffer of the data
        )
        .then(function(decrypted) {
            alert(bytesToASCIIString(decrypted));
        })
        .catch(function(err) {
            console.error(err);
        });

}

    function bytesToASCIIString(bytes) {
        return String.fromCharCode.apply(null, new Uint8Array(bytes));
    }

    function bytesToHexString(bytes) {
        if (!bytes)
            return null;

        bytes = new Uint8Array(bytes);
        var hexBytes = [];

        for (var i = 0; i < bytes.length; ++i) {
            var byteString = bytes[i].toString(16);
            if (byteString.length < 2)
                byteString = "0" + byteString;
            hexBytes.push(byteString);
        }

        return hexBytes.join("");
    }

    function hexStringToUint8Array(hexString) {
        if (hexString.length % 2 != 0)
            throw "Invalid hexString";
        var arrayBuffer = new Uint8Array(hexString.length / 2);

        for (var i = 0; i < hexString.length; i += 2) {
            var byteValue = parseInt(hexString.substr(i, 2), 16);
            if (byteValue == NaN)
                throw "Invalid hexString";
            arrayBuffer[i / 2] = byteValue;
        }

        return arrayBuffer;
    }


    function failAndLog(error) {
        console.log(error);
    }
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Web Crypto API RSA-OAEP Generate Keys and Perform Encryption/Decryption</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Friday september 21, 2018</p>
          </p>
          
          
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>
          
          <p><mark>This sample chapter </mark> extracted from the book, <a href="https://leanpub.com/crypto">Cryptography for JavaScript Developers</a>. </p>
<p><iframe width='160' height='400' src='https://leanpub.com/cryptojs/embed' frameborder='0' allowtransparency='true'></iframe></p>
<hr>



<p>The Web crypto api RSA-OAEP algorithm identifier is used to perform encryption and decryption ordering to the RSAES-OAEP algorithm , using the SHA hash functions defined in this specification and using the mask generation function MGF1.</p>

<h2 class="mt-4"><a id="The_Demo_4"></a>The Demo</h2>
<p>This is the web cryptography api example of performing rsa oaep encryption decryption</p>
<div>
        Input Text<input type="text" class="form-control" name="plainText" value="Hello 8gwifi" id="plainText"> 
        <button type="button"  class="btn btn-primary" onclick="RSA_encrypt()">First Generate RSA-OAEP keys and Perform Encryption</button>
        <button type="button" class="btn btn-primary" onclick="RSA_decrypt()">Perform RSA-OAEP Decryption</button>
    </div>
    
    <div>
        Output <input type="text" class="form-control" name="cipherText" id="cipherText" readonly="true"><br>
        Generated IV <input type="text" class="form-control" name="salt" id="salt" readonly="true"><br>
        RSA-OAEP Public Key (JWK) : <textarea class="form-control" name="rsapublic" id="rsapublic" cols="40" rows="5"> </textarea><br>
        RSA-OAEP Private Key (JWK): <textarea class="form-control" name="rsaprivate" id="rsaprivate" cols="40" rows="5"></textarea>
    </div>

<hr>

<h2 class="mt-4" ><a id="Javascript_example_of_using_webcrypto_api_RSAOAEP_10"></a>webcrypto api RSA-OAEP Javascript example</h2>
<p>Generate the RSA-OAEP 2048 bit Keys  using SHA-256 Algorithms</p>
<pre><code class="html">window.crypto.subtle.generateKey({
                    name: &quot;RSA-OAEP&quot;,
                    modulusLength: 2048, //can be 1024, 2048, or 4096
                    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                    hash: {
                        name: &quot;SHA-256&quot;
                    }, //can be &quot;SHA-1&quot;, &quot;SHA-256&quot;, &quot;SHA-384&quot;, or &quot;SHA-512&quot;
                },
                true, //whether the key is extractable (i.e. can be used in exportKey)
                [&quot;encrypt&quot;, &quot;decrypt&quot;] //must be [&quot;encrypt&quot;, &quot;decrypt&quot;] or [&quot;wrapKey&quot;, &quot;unwrapKey&quot;]
            )
</code></pre>
<p>Sample Export keys to display the RSA public private key in JWK format (You can skip this step) This is for demo purpose, which i showed in UI.</p>
<pre><code class="html">window.crypto.subtle.exportKey(&quot;jwk&quot;, key.publicKey).then(
                    function(keydata) {
                        publicKeyhold = keydata;
                        publicKeyJson = JSON.stringify(publicKeyhold);
                        document.getElementById(&quot;rsapublic&quot;).value = publicKeyJson;
                    }
                );

window.crypto.subtle.exportKey(&quot;jwk&quot;, key.privateKey).then(
                    function(keydata) {
                        privateKeyhold = keydata;
                        privateKeyJson = JSON.stringify(privateKeyhold);
                        document.getElementById(&quot;rsaprivate&quot;).value = privateKeyJson;
                    }
                );
</code></pre>
<p>RSA-OAEP Encryption  Example</p>
<pre><code class="html">window.crypto.subtle.encrypt({
                            name: &quot;RSA-OAEP&quot;,
                            iv: iv,
                        },
                        publicKey, //from generateKey or importKey above
                        asciiToUint8Array(plainText) //ArrayBuffer of data you want to encrypt
                    )
                    .then(function(encrypted) {
                        //returns an ArrayBuffer containing the encrypted data
                        document.getElementById(&quot;cipherText&quot;).value = bytesToHexString(encrypted);
                        document.getElementById(&quot;salt&quot;).value = bytesToHexString(iv);
                    })
                    .catch(function(err) {
                        console.error(err);
                    });
</code></pre>
<p>RSA-OAEP decryption   Example</p>
<pre><code class="html">var cipherText = document.getElementById(&quot;cipherText&quot;).value;
    window.crypto.subtle.decrypt({
                name: &quot;RSA-OAEP&quot;,
                iv: iv
            },
            privateKey, //from generateKey or importKey above
            hexStringToUint8Array(cipherText) //ArrayBuffer of the data
        )
        .then(function(decrypted) {
            alert(bytesToASCIIString(decrypted));
        })
        .catch(function(err) {
            console.error(err);
        });</code></pre>
<hr>
Download the sample code <a href="https://leanpub.com/cryptojs">here </a>

<hr>
Next Reading <a href="window-crypto-aes.jsp">Perform AES Encryption Using importKey Method </a>

<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="addcomments.jsp"%>
      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 
         
         <%@ include file="related-window-crypto.jsp"%>
         
         <%@ include file="related-go.jsp"%>

		 <%@ include file="related-cryptography.jsp"%>
          <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         <%@ include file="related-kube.jsp"%>
         
         
         
         <%@ include file="related-openstack.jsp"%>
         <%@ include file="related-linux.jsp"%>
         
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>


      </div>
      
      <!-- /.row -->


	
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>