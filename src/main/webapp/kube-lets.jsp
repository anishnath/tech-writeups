<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Letsencrypt Obtain Wild Card Certificate Using DNS challenge and Kubernetes with cert manager">
    <meta name="keywords" content="Letsencrypt Obtain Wild Card Certificate Using DNS challenge and Kubernetes certmamager">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>Letsencrypt Obtain Wild Card Certificate Using DNS challenge and Kubernetes</title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/kube-lets.jsp"
  },
  "name" : "Letsencrypt Obtain Wild Card Certificate Using DNS challenge and Kubernetes",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "Letsencrypt Obtain Wild Card Certificate Using DNS challenge and Kubernetes",
  "image":"https://8gwifi.org/docs/img/letskube.png",
  "datePublished" : "2019-08-21",
  "dateModified": "2019-08-21",
  "articleSection" : "Letsencrypt Obtain Wild Card Certificate Using DNS challenge and Kubernetes",
  "articleBody" : [ "Introduction" ,"About LEGO", "CLOUDFLARE as and DNS provider and request this provider to issues the certificates", "Using Cert-manager" , "DNS Provider Cloudflare" , "DNS Provider AWS Route53" ],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Letsencrypt Obtain Wild Card Certificate Using DNS challenge and Kubernetes</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Wednesday August 21, 2019</p>
          </p>
          
          <img class="img-fluid rounded" src="img/letskube.png" height="400" width="500" alt="Referefce ">
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>

<h3 class="mt-4">Introduction </h3>
<p class="has-line-data" data-line-start="2" data-line-end="3">In this exercise we will learn how to obtain Letsencrypt wild card certificate for your domain using DNS-01 challenge for this example i have used the domain name <a href="http://0cloud0.com">0cloud0.com</a> and then uses the certificate and key and add it into the kubernetes cluster</p>
<p class="has-line-data" data-line-start="4" data-line-end="5">The CN entry is going to look like this : <a href="http://CN=0cloud0.com">CN=0cloud0.com</a> and CN=*.0cloud0.com</p>
<p class="has-line-data" data-line-start="6" data-line-end="7">When you get a certificate from Let's Encrypt, they validate that you control the domain names in that certificate using <strong>challenges</strong> as defined by the ACME standard.</p>
<p class="has-line-data" data-line-start="9" data-line-end="10">Let's Encrypt supports two methods of validation to prove control of your domain, <code>http-01</code> validation over HTTP and <code>dns-01</code> (validation over DNS).</p>
<p class="has-line-data" data-line-start="11" data-line-end="12">In order to validate your control of your domains to the certificate authority you will be required to create a specified TXT record in your domain's DNS zone.</p>
<p class="has-line-data" data-line-start="13" data-line-end="14">Many DNS provider offer these TXT record to be created using their API keys as an solution.</p>
<p class="has-line-data" data-line-start="15" data-line-end="16"><strong>About LEGO</strong></p>
<p class="has-line-data" data-line-start="17" data-line-end="18">Let's Encrypt client and ACME library written in Go which gives you robost implementation of all ACME challenges. In this example we are going to use <strong>CLOUDFLARE</strong> as and DNS provider and request this provider to issues the certificates.</p>
<p class="has-line-data" data-line-start="19" data-line-end="20">First  download the lego binary installer from lego release <a href="https://github.com/go-acme/lego/releases">github</a></p>
<p class="has-line-data" data-line-start="21" data-line-end="22">Since we are working with CLOUDFLARE DNS, to access the obtain the CLOUDFLARE API KEY</p>
<ul>
<li class="has-line-data" data-line-start="23" data-line-end="25">Setup the Necessary Request Header</li>
</ul>
<pre><code class="language-console">bash ~ export CLOUDFLARE_API_KEY=YOUR_KEY
bash ~ export CLOUDFLARE_EMAIL=anish2good@yahoo.co.in
</code></pre>
<ul>
<li class="has-line-data" data-line-start="30" data-line-end="32">Use lego to Issues a DNS-01 challenge and wait for command to complete</li>
</ul>
<pre><code class="language-console">>bash ~ ./lego  --dns cloudflare --domains 0cloud0.com --domains *.0cloud0.com --email anish2good@yahoo.co.in run
</code></pre>
<p class="has-line-data" data-line-start="35" data-line-end="36"><strong>The command output</strong></p>
<pre><code class="language-console">2019/08/20 08:03:35 [INFO] [0cloud0.com, *.0cloud0.com] acme: Obtaining bundled SAN certificate
2019/08/20 08:03:37 [INFO] [*.0cloud0.com] AuthURL: https://acme-v02.api.letsencrypt.org/acme/authz/wblN31seRjbNLtmBVY7rVsRskS05Ns5Mqn-XJYwY8vY
2019/08/20 08:03:37 [INFO] [0cloud0.com] AuthURL: https://acme-v02.api.letsencrypt.org/acme/authz/BwcA9yFqo6z_OErtyL3fzWEv3Jfu-CcZuEPTUDE3lvg
2019/08/20 08:03:37 [INFO] [*.0cloud0.com] acme: use dns-01 solver
2019/08/20 08:03:37 [INFO] [0cloud0.com] acme: Could not find solver for: tls-alpn-01
2019/08/20 08:03:37 [INFO] [0cloud0.com] acme: Could not find solver for: http-01
2019/08/20 08:03:37 [INFO] [0cloud0.com] acme: use dns-01 solver
2019/08/20 08:03:37 [INFO] [*.0cloud0.com] acme: Preparing to solve DNS-01
2019/08/20 08:03:39 [INFO] cloudflare: new record for 0cloud0.com, ID af899d5fdd66b7e36cbe0c30f55deeea
2019/08/20 08:03:39 [INFO] [0cloud0.com] acme: Preparing to solve DNS-01
2019/08/20 08:03:40 [INFO] cloudflare: new record for 0cloud0.com, ID 262d43cbfa3df100e35dc3527e23d1e7
2019/08/20 08:03:40 [INFO] [*.0cloud0.com] acme: Trying to solve DNS-01
2019/08/20 08:03:40 [INFO] [*.0cloud0.com] acme: Checking DNS record propagation using [192.168.1.1:53]
2019/08/20 08:03:40 [INFO] Wait for propagation [timeout: 2m0s, interval: 2s]
2019/08/20 08:03:41 [INFO] [*.0cloud0.com] acme: Waiting for DNS record propagation.
2019/08/20 08:03:45 [INFO] [*.0cloud0.com] The server validated our request
2019/08/20 08:03:45 [INFO] [0cloud0.com] acme: Trying to solve DNS-01
2019/08/20 08:03:45 [INFO] [0cloud0.com] acme: Checking DNS record propagation using [192.168.1.1:53]
2019/08/20 08:03:45 [INFO] Wait for propagation [timeout: 2m0s, interval: 2s]
2019/08/20 08:04:40 [INFO] [0cloud0.com] The server validated our request
2019/08/20 08:04:40 [INFO] [*.0cloud0.com] acme: Cleaning DNS-01 challenge
2019/08/20 08:04:42 [INFO] [0cloud0.com] acme: Cleaning DNS-01 challenge
2019/08/20 08:04:42 [INFO] [0cloud0.com, *.0cloud0.com] acme: Validations succeeded; requesting certificates
2019/08/20 08:04:44 [INFO] [0cloud0.com] Server responded with a certificate.
</code></pre>
<ul>
<li class="has-line-data" data-line-start="63" data-line-end="64">Once the validation is succeeded your certificate and key file will get stored in the</li>
</ul>
<pre><code class="html">$ ls .lego/*
.lego/accounts:
acme-v02.api.letsencrypt.org
.lego/certificates:
0cloud0.com.crt  0cloud0.com.issuer.crt  0cloud0.com.json  0cloud0.com.key
</code></pre>
<ul>
<li class="has-line-data" data-line-start="72" data-line-end="74">From here you can create kubernetes secrets and add your tls key and cert file</li>
</ul>
<pre><code class="language-console">root@kube-master:~# kubectl create secret tls 0cloud0-wildcard-certs --key 0cloud0.com.key --cert 0cloud0.com.crt
secret/0cloud0-wildcard-certs created
</code></pre>
<ul>
<li class="has-line-data" data-line-start="79" data-line-end="81">Describe the secrets</li>
</ul>
<pre><code class="language-console">root@kube-master:~# kubectl describe secrets 0cloud0-wildcard-certs
Name:         0cloud0-wildcard-certs
Namespace:    default
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Type:  kubernetes.io/tls

Data
====
tls.key:  288 bytes
tls.crt:  3332 bytes
</code></pre>
<ul>
<li class="has-line-data" data-line-start="95" data-line-end="97">You can create an Ingress file to deploy the certificate for your domain <a href="http://0cloud0.com">0cloud0.com</a></li>
</ul>
<pre><code class="language-console">apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: zeroclouddeploy
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    ingress.kubernetes.io/ssl-redirect: &quot;true&quot;
spec:
  rules:
  - host: 0cloud0.com
    http:
      paths:
      - path: /
        backend:
          serviceName: zerocloud
          servicePort: 8080
  tls:
  - secretName: 0cloud0-wildcard-certs
    hosts:
    - 0cloud0.com
</code></pre>
<pre><code class="language-console">root@kube-master:~# kubectl apply -f ingress.yml 
ingress.extensions/zeroclouddeploy configured
</code></pre>
<ul>
<li class="has-line-data" data-line-start="126" data-line-end="128">Verify the domain <a href="https://0cloud0.com">https://0cloud0.com</a></li>
</ul>
<p class="has-line-data" data-line-start="128" data-line-end="129"><img src="img/lets.png" alt="Wildcard Certificate"></p>
<h2 class="code-line" data-line-start=131 data-line-end=132 ><a id="Using_Certmanager_131"></a>Using Cert-manager</h2>
<p class="has-line-data" data-line-start="133" data-line-end="134">In the previous example we have learn how to obtain certificate using HTTP-01 challenge, In this example we will use cert manager to configure DNS-01 challenge to obtain wildcard Certificate for your given domain name</p>
<h3 class="code-line" data-line-start=135 data-line-end=136 ><a id="DNS_Provider_Cloudflare_135"></a>DNS Provider Cloudflare</h3>
<ul>
<li class="has-line-data" data-line-start="137" data-line-end="139">First Configure the Issuer replace and the email, this example uses production certificate</li>
</ul>
<pre><code class="language-console">apiVersion: certmanager.k8s.io/v1alpha1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: 'EMAIL'
    privateKeySecretRef:
      name: letsencrypt-prod
#    http01: {}
    dns01:
     providers:
     - name: cf-dns
       cloudflare:
         email: 'EMAIL'
         apiKeySecretRef:
              name: cloudflare-api-key
              key: api-key
</code></pre>
<ul>
<li class="has-line-data" data-line-start="161" data-line-end="163">Create Secrets</li>
</ul>
<pre><code class="language-console">API_KEY=$(echo MY_CLOUDFLARE_KEY | base64 -)
cat &lt;&lt;EOF | kubectl apply -f -
---
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-key
type: Opaque
data:
  api-key: $API_KEY
EOF
</code></pre>
<ul>
<li class="has-line-data" data-line-start="177" data-line-end="179">Issue certificate</li>
</ul>
<pre><code class="language-console">apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
 name: 0cloud0wildcard
spec:
 secretName: 0cloud0-wild-certs1
 issuerRef:
   name: letsencrypt-prod
   kind: ClusterIssuer
 commonName:  '*.0cloud0.com'
 acme:
   config:
     - dns01:
         provider: cf-dns
       domains:
         - '*.0cloud0.com'
</code></pre>
<h3 class="code-line" data-line-start=198 data-line-end=199 ><a id="DNS_Provider_AWS_Route53_198"></a>DNS Provider AWS Route53</h3>
<p class="has-line-data" data-line-start="200" data-line-end="201">To configure AWS the following is needed</p>
<ul>
<li class="has-line-data" data-line-start="202" data-line-end="203">AWS_ACCESS_KEY_ID</li>
<li class="has-line-data" data-line-start="203" data-line-end="204">AWS_HOSTED_ZONE_ID</li>
<li class="has-line-data" data-line-start="204" data-line-end="205">AWS_REGION</li>
<li class="has-line-data" data-line-start="205" data-line-end="207">AWS_SECRET_ACCESS_KEY</li>
</ul>
<p class="has-line-data" data-line-start="207" data-line-end="208">This is the YAML definition for configuring the cert-manager to Issue letsencrypt staging certificate</p>
<pre><code class="language-console">---
apiVersion: certmanager.k8s.io/v1alpha1
kind: ClusterIssuer
metadata:
  name: route53Issuer
spec:
  acme:
    email: YOUR_EMAIL
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-staging
    dns01:
      providers:
      - name: route53
        route53:
          region: us-east-1
          accessKeyID: AKIABCDEFGHIJKLMNOPQ
          secretAccessKeySecretRef:
            name: aws-apikey
            key: SecretAccessKey
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-apikey
type: Opaque
data:
  SecretAccessKey: YmxhaGJsYWhibGFoYmxhaGJsYWhibGFo
</code></pre>

<hr>
 

          



<%@ include file="thanks.jsp"%>


<hr>


      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 

          
          <%@ include file="related-kube.jsp"%>
          
          <!-- Article Widget -->
         <%@ include file="related-linux.jsp"%>
         
           <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         
         <%@ include file="related-openstack.jsp"%>
         
         <%@ include file="related-cryptography.jsp"%>
         <%@ include file="related-window-crypto.jsp"%>
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>

      </div>
      <!-- /.row -->


	<%@ include file="addcomments.jsp"%>
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>