<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="How to configure routing in kubernetes traefik, name based routing traffic, route based traefik, kubernetes traefik ingress expose service">
    <meta name="keywords" content="traefik in kubernetes helm, traefik routing tutorial, traefik kubernetes ingress, exposing service with traefik ingrees, kubernetes tutorial, kubernetes by examples">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>How to configure routing in kubernetes traefik, name based routing traffic, route based traefik, kubernetes traefik ingress expose service</title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/kube-traefik2.jsp"
  },
  "name" : "How to configure routing in kubernetes ingress traefik",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "How to configure routing in kubernetes traefik",
  "image":"https://8gwifi.org/docs/img/kube-traefik.png",
  "datePublished" : "2019-01-23",
  "dateModified": "2019-01-23",
  "articleSection" : "How to configure routing in kubernetes traefik",
  "articleBody" : [ "Introduction" ,"Exposing services to external clients", "About traefik" , "Name based routing traefik" , "path based routing" ,  "traefik routing" , "Exposing services to external clients" , "traefik ssl configuration" ],
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Kubernetes Ingress (Traefik)</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Wednesday January 23, 2019</p>
          </p>
          
          <img class="img-fluid rounded" src="img/traefik.png" height="400" width="500" alt="Referefce ">
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>

<h3 class="mt-4">Introduction </h3>
<p>Kubernetes is the great way to manage docker service in the orchestration way, the service which are created need to be exposed to external clients, which can be done in many ways, This tutorial explains how to use Traefik as an Ingress controller for a Kubernetes cluster</p>
<h2><a id="Exposing_services_to_external_clients_10"></a>Exposing services to external clients</h2>
<p>In kubernetes these are the defined way to make service accessible externally we better known as</p>
<ul>
<li><strong>Node port</strong> : Exposes the service on each Node's IP at a static port (the <code>NodePort</code>)</li>
<li><strong>Loadbalancer</strong>; Exposes the service externally using a cloud provider's load balancer. <code>NodePort</code> and <code>ClusterIP</code> services, to which the external load balancer will route, are automatically created.</li>
<li><strong>Ingress Resource</strong> :  This operates on the at the application layer7, in TCP/IP stack, the HTTP level and offer more feature than layer4 service.</li>
</ul>
<p>This tutorial is dedicated to use <strong>Ingress Resource</strong> using the  <strong>Traefik</strong> Kubernetes Ingress Controller</p>
<p><a href="kube-traefik.jsp">if you have not setup the traefik yet in k8 cluster then, Click here to Setup Traefik in k8 cluster</a></p>
<h2><a id="About_Traefik_21"></a>About Traefik</h2>
<p>Traefik is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components and configures itself automatically and dynamically. Pointing Traefik at your orchestrator should be the only configuration step you need.</p>
<p><img  class="img-fluid rounded" src="img/trafeik-ingress.png" alt="enter image description here"></p>
<p>Traefik Ingresses operate at the application layer of the network stack (HTTP) and can provide features such as cookie-based session affinity and the like, which services can't.</p>
<h2><a id="The_Example_Application_31"></a>The Example Application</h2>
<p>We are going here to setup three sample nginx cheese web application, the docker images are located <a href="https://hub.docker.com/r/errm/cheese/tags">here</a>  .</p>
<ol>
<li>Docker image: errm/cheese:wensleydale</li>
<li>Docker image: errm/cheese:cheddar</li>
<li>Docker image: errm/cheese:stilton</li>
</ol>
<p><img  class="img-fluid rounded" src="img/traefik-cheese.png" alt="enter image description here"></p>
<h2><a id="What_is_Name_based_routing__42"></a>What is Name based routing ?</h2>
<p>The Name-Based Routing performs routing by name and support routing HTTP traffic to multiple host names at the same IP address but different domain names , lets start by launching the pods for the cheese websites.</p>
<p><strong>Deployment of Cheese Web Application</strong></p>
<pre><code class="language-console">root@kube-master:# kubectl apply -f https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-deployments.yaml
deployment.extensions/stilton created
deployment.extensions/cheddar created
deployment.extensions/wensleydale created
</code></pre>
<p>To provide some explanations about the file content:</p>
<ul>
<li>We define a  deployment (<code>kind: Deployment</code>)</li>
<li>The name of the object is "stilton" (<code>name: stilton</code>)</li>
<li>We want one replica (<code>replicas: 2</code>)</li>
<li>It will deploy pods that have the label app:cheese (<code>selector: matchLabels: app:cheese</code>)</li>
<li>Then we define the pods (<code>template: ...</code>)</li>
<li>The Pods will have the cheese label (<code>metadata:labels:app:cheese</code>)</li>
<li>The Pods will host a container using the image tag errm/cheese:stilton (<code>image: errm/cheese:stilton</code>)</li>
<li>The same deployment is repeated for cheddar and wensleydale</li>
</ul>
<p>Make sure all the deployment pods are up and running</p>
<pre><code class="language-console">root@kube-master:/home/ansible# kubectl get pods
NAME READY STATUS  RESTARTS AGE
cheddar-6c895c7cc7-2qztp 1/1 Running 0  7m
cheddar-6c895c7cc7-mzq9v 1/1 Running 0  7m
stilton-7989d7c86f-62wrt 1/1 Running 0  7m
stilton-7989d7c86f-fjttz 1/1 Running 0  7m
wensleydale-58784fc6f7-f8szd 1/1 Running 0  7m
wensleydale-58784fc6f7-prb8z 1/1 Running 0  7m
</code></pre>
<p><strong>Service Cheese Web Application</strong></p>
<p>Next we need to setup a Service for each of the cheese pods.</p>
<pre><code class="language-console">root@kube-master:# kubectl apply -f https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-services.yaml
service/stilton created
service/cheddar created
service/wensleydale created
</code></pre>
<p>All the</p>
<pre><code class="language-console">root@kube-master:/home/ansible# kubectl get svc
NAME  TYPE  CLUSTER-IP EXTERNAL-IP PORT(S) AGE
cheddar ClusterIP 10.108.200.238 &lt;none&gt;  80/TCP  30s
kubernetes  ClusterIP 10.96.0.1  &lt;none&gt;  443/TCP 1h
stilton ClusterIP 10.102.20.8  &lt;none&gt;  80/TCP  30s
wensleydale ClusterIP 10.109.58.21 &lt;none&gt;  80/TCP  30s
</code></pre>
<p>At this point, we have deployment and Service ready in the K8 cluster, and we're about to define the ingress rules so that the world can eat the required service.</p>
<pre><code class="language-console">apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cheese
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: stilton.minikube
    http:
      paths:
      - path: /
        backend:
          serviceName: stilton
          servicePort: http
  - host: cheddar.minikube
    http:
      paths:
      - path: /
        backend:
          serviceName: cheddar
          servicePort: http
  - host: wensleydale.minikube
    http:
      paths:
      - path: /
        backend:
          serviceName: wensleydale
          servicePort: http
</code></pre>
<p>To provide some explanations about the file content:</p>
<ul>
<li>We define a  Ingress (<code>kind: Ingress</code>)</li>
<li>The name of the object is "cheese" (<code>name: cheese</code>)</li>
<li>Then we define the rules (<code>rules: ...</code>)</li>
<li>For each service there is hostname defined for example the hostname <strong>stilton.minikube</strong>  is mapped to <strong>stilton</strong> service.</li>
<li>The rules are repeated for each service.</li>
<li>Let's apply this rule in k8 cluster</li>
</ul>
<pre><code class="language-console">root@kube-master:/home/ansible# kubectl apply -f https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-ingress.yaml
ingress.extensions/cheese created
</code></pre>
<p>Verify the Ingress, all the hosts can be accessed with the ingress port 80</p>
<pre><code class="language-console">root@kube-master:/home/ansible# kubectl get ingress
NAME  HOSTS  ADDRESS PORTS AGE
cheese  stilton.minikube,cheddar.minikube,wensleydale.minikube 80  31s
</code></pre>
<p>Now visit the  Traefik dashboard and you should see a frontend for each host. Along with a backend listing for each service with a server set up for each pod.</p>
<p><img  class="img-fluid rounded" src="img/trafeik-dashbaord1.png" alt="enter image description here"></p>
<p>Open the webbrowser and start eating your faviourite cheese</p>
<ul>
<li><a href="http://cheddar.minikube/">http://cheddar.minikube/</a></li>
<li><a href="http://stilton.minikube/">http://stilton.minikube/</a></li>
<li><a href="http://wensleydale.minikube/">http://wensleydale.minikube/</a></li>
</ul>
<h2><a id="What_is_PATH_based_routing_163"></a>What is PATH based routing</h2>
<p>Path based routing differ from Name based routing in a sense, we don't have multiple domains names, all the URI is distinguished and routed from the PATH prefix under a single domain, for example the above cheese application can be access through the single URI.</p>
<p><img  class="img-fluid rounded" src="img/traefik-path.png" alt="enter image description here"></p>
<p>Let's create the PATH base routing for the cheese application</p>
<pre><code class="language-console">root@kube-master:/home/ansible# kubectl apply -f https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheeses-ingress.yaml
ingress.extensions/cheeses created
</code></pre>
<p>View the Ingress, as you can notices the newly created ingress <strong>cheeses</strong> can be accessed through the hostname  <strong>cheeses.minikube</strong></p>
<pre><code class="language-console">root@kube-master:/home/ansible# kubectl get ingress

NAME  HOSTS  ADDRESS PORTS AGE
cheese  stilton.minikube,cheddar.minikube,wensleydale.minikube 80  13m
cheeses cheeses.minikube 80  1m
</code></pre>
<p>You should now be able to visit the websites in your browser.</p>
<ul>
<li><a href="http://cheeses.minikube/stilton/">http://cheeses.minikube/stilton</a></li>
<li><a href="http://cheeses.minikube/cheddar/">http://cheeses.minikube/cheddar</a></li>
<li><a href="http://cheeses.minikube/wensleydale/">http://cheeses.minikube/wensleydale</a></li>
</ul>
<h2><a id="Final_Note_193"></a>Final Note</h2>
<ul>
<li>The above traefik installation is not secure, and shouldn't be used for production, for production setting refer the helm stable/trafeik charts, for example the below chart value will set traefik in SSL mode, and set the BASIC AUTH enabled</li>
</ul>
<pre><code class="language-console">helm install stable/traefik --name traefik --set dashboard.enabled=true,dashboard.domain=dashboard.traefik,rbac.enabled=true,dashboard.auth.basic.traefik='$apr1$vUmd7ddA$CoklUZpHBbRzvnZUz6eFY.',ssl.enabled=true,ssl.enforced=true --namespace kube-system
</code></pre>
<ul>
<li>It is advisable to install the traefik in the kube-system namespace</li>
<li>Always measure your resource needs, and adjust requests and limits accordingly.</li>
</ul>
<p>Thanks Happy traefiking, do poke me for any problems</p>
          
<hr>
<p><h2>Video Demo </h2> </p>
 <iframe width="420" height="315"
src="https://youtube.com/embed/fCu-dNd-tqQ">
</iframe> 



<%@ include file="thanks.jsp"%>


<hr>


      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 

          
          <%@ include file="related-kube.jsp"%>
          
          <!-- Article Widget -->
         <%@ include file="related-linux.jsp"%>
         
           <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         
         <%@ include file="related-openstack.jsp"%>
         
         <%@ include file="related-cryptography.jsp"%>
         <%@ include file="related-window-crypto.jsp"%>
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>

      </div>
      <!-- /.row -->


	<%@ include file="addcomments.jsp"%>
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>