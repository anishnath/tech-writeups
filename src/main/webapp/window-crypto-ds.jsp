<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Web Crypto API Digital Signature Using PBKDF2 and HMAC ">
    <meta name="keywords" content="Web Crypto API Digital Signature Using PBKDF2 and HMAC,web crypto live tutorial, windo.crypto javascript examples, Web Cryptography API">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>Web Crypto API Digital Signature Using PBKDF2 and HMAC </title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/window-crypto-ds.jsp"
  },
  "name" : "Digital Signature Using PBKDF2 and HMAC",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "Digital Signature Using PBKDF2 and HMAC ",
  "image":"https://8gwifi.org/docs/img/ds.png",
  "datePublished" : "2018-09-25",
  "dateModified": "2018-09-25",
  "articleSection" : "Web Crypto Digital Signature Using PBKDF2 and HMAC ",
  "articleBody" : [ "Web Crypto API Digital Signature Using PBKDF2 and HMAC","PBKDF2,HMAC Digital Signature Demo","pbkdf2,hmac Javascript example of using webcrypto api","The first step is to derive the key from the user supplied password","Once the key is derived, now we are signing the message, using this derived key","To verify the signature of the message, pass the pbdkf2 crypto key,signature and the plain text message"]
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>

<script type="text/javascript">

var publicKey;  
function generateKey(password,iterations,plainText) {
	// salt should be Uint8Array or ArrayBuffer

	var saltBuffer = crypto.getRandomValues(new Uint8Array(8));
	var encoder = new TextEncoder('utf-8');
	var passphraseKey = encoder.encode("password");

	// You should firstly import your passphrase Uint8array into a CryptoKey
window.crypto.subtle.importKey(
  'raw', 
  passphraseKey, 
  {name: 'PBKDF2'}, 
  false, 
  ['deriveBits', 'deriveKey']
).then(function(key) {

  return window.crypto.subtle.deriveKey(
    { "name": 'PBKDF2',
      "salt": saltBuffer,
      "iterations": iterations,
      "hash": 'SHA-256'
    },
    key,
    { "name": 'HMAC', hash: {name: "SHA-256"} },
    true,
    [ "sign","verify"]
  )
}).then(function (webKey) {
  publicKey=webKey
  window.crypto.subtle.sign(
      {
        name: "HMAC"
      },
      webKey,
      asciiToUint8Array(plainText) //ArrayBuffer of data we want to sign
    )
    .then(function(signature){
      document.getElementById("signature").value= bytesToHexString(signature)
    })
    .catch(function(err){
      console.error(err);
    });

    return crypto.subtle.exportKey("raw", webKey);

}).then(function (buffer) {

    document.getElementById("key").value= bytesToHexString(buffer);
    document.getElementById("salt").value= bytesToHexString(saltBuffer);
});

}

  function Verify_Message() {

    var cryptoObj = window.crypto || window.msCrypto;

    if(!cryptoObj)
    {
        alert("Crypto API is not supported by the Browser");
        return;
    }
    
    var plainText = document.getElementById("plainText").value;
    var signature = document.getElementById("signature").value;
    var derivedKey = document.getElementById("key").value;

    if(!publicKey)
    {
        alert("Derive Key and Sign Message First ")
        return;
    }
    window.crypto.subtle.verify({
                name: "HMAC",
            },
            publicKey,
            hexStringToUint8Array(signature),
            asciiToUint8Array(plainText)
        )
        .then(function(decrypted) {
            alert("Verified   " + decrypted);
        })
        .catch(function(err) {
            console.error(err);
        });

}


function asciiToUint8Array(str) {
        var chars = [];
        for (var i = 0; i < str.length; ++i)
            chars.push(str.charCodeAt(i));
        return new Uint8Array(chars);
    }

function bytesToHexString(bytes) {
        if (!bytes)
            return null;

        bytes = new Uint8Array(bytes);
        var hexBytes = [];

        for (var i = 0; i < bytes.length; ++i) {
            var byteString = bytes[i].toString(16);
            if (byteString.length < 2)
                byteString = "0" + byteString;
            hexBytes.push(byteString);
        }

        return hexBytes.join("");
    }

function generateKey1() {
  var cryptoObj = window.crypto || window.msCrypto;

    if(!cryptoObj)
    {
        alert("Crypto API is not supported by the Browser");
        return;
    }
	var password = document.getElementById("password").value;
	var iteration = document.getElementById("iteration").value;
  var plainText = document.getElementById("plainText").value;
	generateKey(password,iteration,plainText);
}

function hexStringToUint8Array(hexString) {
        if (hexString.length % 2 != 0)
            throw "Invalid hexString";
        var arrayBuffer = new Uint8Array(hexString.length / 2);

        for (var i = 0; i < hexString.length; i += 2) {
            var byteValue = parseInt(hexString.substr(i, 2), 16);
            if (byteValue == NaN)
                throw "Invalid hexString";
            arrayBuffer[i / 2] = byteValue;
        }

        return arrayBuffer;
    }


</script>



  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Web Crypto API Digital Signature Using PBKDF2 and HMAC</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Tuesday september 25, 2018</p>
          </p>
          
          
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>


<p>In this example we are going to produce the digital signature of the message by using pbkdf2 key derivation function, and then sign the message from the derived key using HMAC, then we are going to verify the message</p>
<hr>
<h2 class="mt-4">PBKDF2,HMAC Digital Signature Demo</h2>
<p>This is the web cryptography api example of producing digital signature of the message </p>

<div>
Iteration: <input type="text" class="form-control" id="iteration" onkeypress="if ( isNaN(this.value + String.fromCharCode(event.keyCode) )) return false;" size="5" value="1000" /><br />
Password: <input type="password" class="form-control"  id="password" value="hello8gwifi" /><br />
Input Message: <input type="text" class="form-control" id="plainText" value="hello 8gwifi" /><br />
Singed Message: <input readonly="true" class="form-control" type="text" size="90" id="signature"/><br />

<input type="button" class="btn btn-primary"  onclick="generateKey1()" value="Derive PBKDF2 Key and Sign Message(HMAC)" />
<input type="button" class="btn btn-primary"  onclick="Verify_Message()" value="Verify Message" />
</div>


<div>

PBKDF2 Derived Key (Hex): <input class="form-control"  readonly="true" size="90" type="text" id="key" /><br />
Randow Salt (Hex) : <input type="text" class="form-control"  readonly="true" size="40" id="salt" /><br />

</div>

<hr>
<h2 class="mt-4">pbkdf2,hmac  Javascript example of using webcrypto api</h2>
<p>The first step is to derive the key from the user supplied password, </p>
<pre><code class="html">window.crypto.subtle.importKey(
      'raw', 
      passphraseKey, 
      {name: 'PBKDF2'}, 
      false, 
      ['deriveBits', 'deriveKey']
    ).then(function(key) {
    
      return window.crypto.subtle.deriveKey(
        { "name": 'PBKDF2',
          "salt": saltBuffer,
          "iterations": iterations,
          "hash": 'SHA-256'
        },
        key,
        { "name": 'HMAC', hash: {name: "SHA-256"} },
        true,
        [ "sign","verify"]
      )
    }).then(function (webKey) {
      publicKey=webKey
</code></pre>
<p>Once the key is derived, now we are signing the message, using this derived key </p>
<pre><code class="html">window.crypto.subtle.sign(
          {
            name: "HMAC"
          },
          webKey,
          asciiToUint8Array(plainText) //ArrayBuffer of data we want to sign
        )
        .then(function(signature){
          document.getElementById("signature").value= bytesToHexString(signature)
        })
        .catch(function(err){
          console.error(err);
        });
    
        return crypto.subtle.exportKey("raw", webKey);
    
    }).then(function (buffer) {
    
        document.getElementById("key").value= bytesToHexString(buffer);
        document.getElementById("salt").value= bytesToHexString(saltBuffer);
    });</code></pre>
<p><strong>Signature Verification</strong> To verify the signature of the message, pass the pbdkf2 crypto key,signature and the plain text message </p>
<pre><code class="html">window.crypto.subtle.verify({
                    name: "HMAC",
                },
                publicKey,
                hexStringToUint8Array(signature),
                asciiToUint8Array(plainText)
            )
            .then(function(decrypted) {
                alert("Verified   " + decrypted);
            })
            .catch(function(err) {
                console.error(err);
            });</code></pre>
<hr>
Download the sample code <a href="https://drive.google.com/file/d/1LEuJXsMZR2VEo8A_LDHstcmj6_jI9BjO/view?usp=sharing">here </a>

<hr>
Next Reading <a href="window-crypto-pbkdf.jsp">Web Crypto API PBKDF2 Generate Password</a>

<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="addcomments.jsp"%>
      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 
         
         <%@ include file="related-window-crypto.jsp"%>

		 <%@ include file="related-cryptography.jsp"%>
          <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         <%@ include file="related-kube.jsp"%>
         
         
         
         <%@ include file="related-openstack.jsp"%>
         <%@ include file="related-linux.jsp"%>
         
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>


      </div>
      
      <!-- /.row -->


	
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>