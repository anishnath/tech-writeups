<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="kubernetes rbac example, rbac kubernetes, setting up users and rbac in kubernetes, kubernetes role and rolebinding">
    <meta name="keywords" content="rbac in kubernetes, setting up users and rbac in kubernetes, kubernetes role and rolebinding,kubernetes tutorial, kubernetes by examples, kubernetes interview questions ">
    <meta name="author" content="Anish nath">
    <meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

    <title>Kubernetes Setting up Role-Based Access Control(RBAC)</title>

    <!-- Bootstrap core CSS -->
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/blog-post.css" rel="stylesheet">
    
    <link rel="stylesheet"  href="css/highlight/default.min.css">
	<script src="css/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad();</script>
	
	
		<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://8gwifi.org/docs/kube-rbac.jsp"
  },
  "name" : "Kubernetes Namespace",
  "author" : {
    "@type" : "Person",
    "name" : "Anish"
  },
  "headline": "Kubernetes Namespace",
  "image":"https://8gwifi.org/docs/img/rolebased.png.png",
  "datePublished" : "2019-02-07",
  "dateModified": "2019-02-07",
  "articleSection" : "Kubernetes Setting up Role-Based Access Control(RBAC)",
  "articleBody" : [ "Kubernetes Setting up Role-Based Access Control(RBAC)" ,"Role" , "ClusterRole" , "RoleBinding" , "ClusterRoleBinding" , "Create Role and Rolebinding for user1 kubernetes" , "Verify Roles and RoleBindings" , "Testing RBAC kubernetes"]
  "publisher" : {
    "@type" : "Organization",
    "name" : "8gwifi.org Tech Blog",
    "logo" :  {
      "@type": "ImageObject",
      "url": "https://8gwifi.org/docs/img/logo.jpg"
    }
  }
}
</script>


  </head>

  <body>

    <!-- Navigation -->
 	<%@ include file="navigation.jsp"%>

    <!-- Page Content -->
    <div class="container">

      <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-8">

          <!-- Title -->
          <h1 class="mt-4">Kubernetes Setting up Role-Based Access Control(RBAC)</h1>

          <!-- Author -->
          <p class="lead">
            by
            <a href="https://www.linkedin.com/in/anishnath">Anish</a>
            <p>Posted on Thursday February 7, 2019</p>
          </p>
          
          <img class="img-fluid rounded" src="img/rolebased.png"  alt="Referefce ">
          
          <%@ include file="footer_adsense.jsp"%>
           <%@ include file="analytics.jsp"%>
           
          <hr>

<h3 class="mt-4">Introduction </h3>

<p>You define your RBAC permissions by creating objects from the  <code>rbac.authorization.k8s.io</code>  API group in your cluster. You can create the objects using the  <code>kubectl</code>  command-line interface, or programmatically.</p>
<p>Youâ€™ll need to create two kinds of objects:</p>
<ol>
<li>A  <code>Role</code>  or  <code>ClusterRole</code>  object that defines what resource types and operations are allowed for a set of users.</li>
<li>A  <code>RoleBinding</code>  or  <code>ClusterRoleBinding</code>  that associates the  <code>Role</code>  (or  <code>ClusterRole</code>) with one or more specific users.</li>
</ol>
<p>RBAC permissions are purely additive there are no "deny" rules. When structuring your RBAC permissions, you should think in terms of "granting" users access to cluster resources.</p>
<p><strong>The LAB</strong></p>
<p>In this LAB exercise we are going to run the below use case</p>
<ul>
<li>Create namespaces <strong>dev</strong> and <strong>stag</strong></li>
<li>Create two user names <strong>user1</strong> and <strong>user2</strong></li>
<li><strong>user1</strong> belongs to <strong>dev</strong> namespace</li>
<li><strong>user2</strong> belongs to <strong>stage</strong> namespace</li>
<li>user1 and user2 defined with <strong>Role</strong> and <strong>RoleBinding</strong></li>
<li><strong>user1</strong> created <strong>busybox</strong> pod in dev namespace</li>
<li><strong>user2</strong> created <strong>busybox</strong> pod in stage namespace</li>
<li><strong>user1</strong> tried to access <strong>busybox</strong> pod in <strong>stage</strong> namespace  <strong>Access Denied</strong>  (Valid Use case)</li>
<li><strong>user2</strong> tried to access <strong>busybox</strong> pod in <strong>dev</strong> namespace  <strong>Access Denied</strong>  (Valid Use case)</li>
<li><strong>user1</strong> can query pods in <strong>dev</strong> namespace  (Valid Use case)</li>
<li><strong>user2</strong> can query pod in <strong>stage</strong> namespace   (Valid Use case)</li>
</ul>
<p><strong>1. Creating dev and stage namespace</strong></p>
<p>To learn more about namespaces go <a href="kube-namespaces.jsp">here</a></p>
<pre><code class="language-console">root@kube-master:# kubectl create namespace dev
namespace/dev created
root@kube-master:# kubectl create namespace stage
namespace/stag created
</code></pre>
<p><strong>2. Creating user1</strong></p>
<ul>
<li>To create <strong>user1</strong>  generate RSA keys for user1 create CSR and get it singed with kubernetes rootCA and rootCA private key</li>
</ul>
<pre><code class="language-console">root@kube-master:# openssl genrsa -out user1.key 2048
Generating RSA private key, 2048 bit long modulus
..................................................................................+++
.................+++
e is 65537 (0x10001)
</code></pre>
<p>Generate the CSR</p>
<pre><code class="language-console">root@kube-master:# openssl req -new -key user1.key -out user1.csr -subj &quot;/CN=user1/O=8gwifi.org&quot;
</code></pre>
<p>Sign the CSR  and create the user1 x.509 certificate , sign CSR with the kubernetes rootCA and rootCA key which usually  present in the <code>/etc/kubernetes/pki/</code> location.</p>
<pre><code class="language-console">root@kube-master:# openssl x509 -req -in user1.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out user1.crt -days 365
Signature ok
subject=/CN=user1/O=8gwifi.org
Getting CA Private Key
</code></pre>
<p>update the kubernetes config and define <code>set-credentials</code> and <code>set-context</code> for <strong>user1</strong></p>
<pre><code class="language-console">root@kube-master:# kubectl config set-credentials user1 --client-certificate=user1.crt --client-key=user1.key
User &quot;user1&quot; set.
root@kube-master:# kubectl config set-context dev --cluster=kubernetes --namespace=dev --user=user1
Context &quot;dev&quot; modified.
</code></pre>
<p><strong>3. Creating user2</strong></p>
<p>Repeat the same process for creating <strong>user2</strong> in kubernetes cluster</p>
<pre><code class="language-console">openssl genrsa -out user2.key 2048
openssl req -new -key user2.key -out user2.csr -subj &quot;/CN=user2/O=8gwifi.org&quot;
openssl x509 -req -in user2.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out user2.crt -days 365
</code></pre>
<p>update the kubernetes config and define <code>set-credentials</code> and <code>set-context</code> for <strong>user2</strong></p>
<pre><code class="language-console">kubectl config set-credentials user2 --client-certificate=user2.crt --client-key=user2.key
kubectl config set-context stage --cluster=kubernetes --namespace=stage --user=user2
</code></pre>
<p><strong>4. Create Role and Rolebinding for user1</strong></p>
<p><strong>Creating role</strong><br>
Create role in <strong>dev</strong> namespace, In this <em>yaml</em> file we are creating the rule that allows a user to execute operations like  <strong>deployments</strong>,<strong>replicasets</strong>,<strong>pods</strong></p>
<pre><code class="language-console">kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: dev
  name: devlopment
rules:
- apiGroups: [&quot;&quot;, &quot;extensions&quot;, &quot;apps&quot;]
  resources: [&quot;deployments&quot;, &quot;replicasets&quot;, &quot;pods&quot;]
  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]
</code></pre>

<p>Apply this role in kubernetes cluster</p>
<pre><code class="language-console">root@kube-master:# kubectl create -f dev-role.yaml
role.rbac.authorization.k8s.io/devlopment created
</code></pre>
<p><strong>Bind this role to user1</strong></p>
<p>Binding the <strong>user1</strong> to the <code>Role:devlopment</code></p>
<pre><code class="language-console">kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: dev-role-binding
  namespace: dev
subjects:
- kind: User
  name: user1
  apiGroup: &quot;&quot;
roleRef:
  kind: Role
  name: devlopment
  apiGroup: &quot;&quot;
</code></pre>
<p>Apply this rolebinding in kubernetes cluster</p>
<pre><code class="language-console">root@kube-master:# kubectl create -f  dev-role-binding.yaml
rolebinding.rbac.authorization.k8s.io/dev-role-binding created
</code></pre>
<p><strong>5. Create Role and Rolebinding for user2</strong></p>
<p>Repeat the same process for <strong>user2</strong>, in the <strong>stage</strong> namespace, creating <strong>role</strong> in <strong>stage</strong> namespace</p>
<pre><code class="language-console">kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: stage
  name: staging
rules:
- apiGroups: [&quot;&quot;, &quot;extensions&quot;, &quot;apps&quot;]
  resources: [&quot;deployments&quot;, &quot;replicasets&quot;, &quot;pods&quot;]
  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]
</code></pre>
<p>Apply the role in k8 cluster</p>
<pre><code class="language-console">kubectl create -f stage-role.yaml
</code></pre>
<p><strong>Create rolebinding for user2</strong></p>
<pre><code class="language-console">kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: stage-role-binding
  namespace: stage
subjects:
- kind: User
  name: user2
  apiGroup: &quot;&quot;
roleRef:
  kind: Role
  name: staging
  apiGroup: &quot;&quot;
</code></pre>
<pre><code class="language-console">kubectl create -f stage-role-binding.yaml
</code></pre>
<%@ include file="footer_adsense.jsp"%> 
<p><strong>6. Verify Roles and RoleBindings</strong></p>
<p>Verify the namespace points to correct <strong>role,rolebindings and users</strong></p>
<pre><code class="language-console">root@kube-master:# kubectl get roles -n dev
root@kube-master:# kubectl get roles -n stage
root@kube-master:# kubectl get rolebinding -n stage
root@kube-master:# kubectl get rolebinding -n dev
root@kube-master:# kubectl describe rolebinding dev-role-binding -n dev
Name:         dev-role-binding
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;
Role:
  Kind:  Role
  Name:  devlopment
Subjects:
  Kind  Name   Namespace
  ----  ----   ---------
  User  user1  
root@kube-master:# kubectl describe rolebinding stage-role-binding -n stage
Name:         stage-role-binding
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;
Role:
  Kind:  Role
  Name:  staging
Subjects:
  Kind  Name   Namespace
  ----  ----   ---------
  User  user2 
</code></pre>
<p><strong>8. Launch busybox pods in the respective namespace</strong></p>
<p>In practical you can luanch any deployment here, the busybox is choosen for testing purpose only</p>
<pre><code class="language-console">apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - image: busybox
    command:
      - sleep
      - &quot;3600&quot;
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always
</code></pre>
<p>Creating busybox pods in <strong>stage</strong> and <strong>dev</strong> namespaces</p>
<pre><code class="language-console">root@kube-master:# kubectl create -f busybox.yaml -n stage 
pod/busybox created
root@kube-master:# kubectl create -f busybox.yaml -n dev
pod/busybox created
</code></pre>
<p><strong>9. Testing RBAC</strong></p>
<p>While creating <strong>user1</strong> and <strong>user2</strong> the config context are set, verify itâ€™s working as desired, this is also used for RBAC troubleshootings.</p>
<pre><code class="language-console">root@kube-master:# kubectl config get-contexts
CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE
          dev                           kubernetes   user1              dev
*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   
          stage                         kubernetes   user2              stage
</code></pre>
<ul>
<li>Valid Use case by using dev and stage context both user1 and user2 will see their respective pods</li>
</ul>
<pre><code class="language-console">root@kube-master:# kubectl --context=dev get pods
NAME      READY     STATUS    RESTARTS   AGE
busybox   1/1       Running   0          4m
root@kube-master:# kubectl --context=stage get pods
NAME      READY     STATUS    RESTARTS   AGE
busybox   1/1       Running   0          4m
</code></pre>
<ul>
<li>Valid use case, <strong>user2</strong> will be forbidden to check on <strong>dev</strong> context</li>
</ul>
<pre><code class="language-console">root@kube-master:# kubectl --context=dev get pods --user=user2
No resources found.
Error from server (Forbidden): pods is forbidden: User &quot;user2&quot; cannot list pods in the namespace &quot;dev&quot;
</code></pre>
<ul>
<li>Valid use case <strong>user1</strong> will be forbidden to access <strong>stage</strong> context</li>
</ul>
<pre><code class="language-console">root@kube-master:# kubectl --context=stage get pods --user=user1
No resources found.
Error from server (Forbidden): pods is forbidden: User &quot;user1&quot; cannot list pods in the namespace &quot;stage&quot;
</code></pre>



<%@ include file="thanks.jsp"%>


<hr>


      <!-- Comments Form -->
    

          <!-- Single Comment -->
 

          <!-- Comment with nested comments -->
        
          

        </div>

		
        
        <!-- Sidebar Widgets Column -->
        <div class="col-md-4">

          <!-- Ad Widget -->
         <%@ include file="footer_adsense.jsp"%> 

          
          <%@ include file="related-kube.jsp"%>
          
          <!-- Article Widget -->
         <%@ include file="related-linux.jsp"%>
         
           <!-- Article Widget -->
         <%@ include file="related-ansible.jsp"%>
         
         
         <%@ include file="related-openstack.jsp"%>
         
         <%@ include file="related-cryptography.jsp"%>
         <%@ include file="related-window-crypto.jsp"%>
         
         <!-- Topic Widget -->
         <%@ include file="side.jsp"%>
         
           <!-- Add Comments Support -->
         
         
         

        </div>

      </div>
      <!-- /.row -->


	<%@ include file="addcomments.jsp"%>
    
    </div>
    
    
    
    
    <!-- /.container -->

    <!-- Footer -->
    <footer class="py-5 bg-dark">
      <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; 8gwifi.org 2018</p>
      </div>
      <!-- /.container -->
    </footer>
    
    Here

    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  </body>

</html>